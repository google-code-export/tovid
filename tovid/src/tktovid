#! /usr/bin/env python
# tktovid

"""A Tkinter graphical user interface for tovid. Highly experimental."""

"""Note on notation:
tkinter widgets variable names shall use a prefix describing widget type, and
camel-case for remaining words, i.e.
    labelFoo for Label
    buttonFoo for Button
    listFoo for Listbox
    entryFoo for Entry
"""

from Tkinter import *
import tkFileDialog

# ============================
#
# Frames for grouping controls
#
# ============================

class FormatFrame(Frame):
    """A frame containing controls suitable for setting disc format
    (VCD, SVCD, DVD, etc.)"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.rbFormat = {}            # Radiobuttons, indexed by format name
        self.varFormat = StringVar()  # Currently selected format
        self.grid()    
        self.drawWidgets()

    def drawWidgets(self):
        # Label
        self.label = Label(self, text="Disc format")
        self.label.grid()
        # Radio buttons
        for format in ['DVD', 'VCD', 'SVCD']:
            self.rbFormat[format] =\
                Radiobutton(self,
                            text = format,
                            value = format,
                            variable = self.varFormat,
                            command = self.changeFormat)
            self.rbFormat[format].grid(sticky=NW)
        self.varFormat.set('DVD')
        
    def changeFormat(self):
        """Event handler called when format radio buttons are clicked."""
        print "Disc format: %s" % self.varFormat.get()
        
    def getOptions(self):        
        return "-%s " % str(self.varFormat.get()).lower()


class TvsysFrame(Frame):
    """A frame containing controls suitable for setting TV system (PAL, NTSC).
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.rbTvsys = {}         # Radiobuttons, indexed by tvsys name
        self.varTvsys = StringVar()  # Currently selected tvsys
        self.grid()
        self.drawWidgets()

    def drawWidgets(self):
        # Label
        self.label = Label(self, text="TV system")
        self.label.grid()
        # Radio buttons
        for tvsys in ['NTSC', 'PAL']:
            self.rbTvsys[tvsys] =\
                Radiobutton(self,
                            text = tvsys,
                            value = tvsys,
                            variable = self.varTvsys,
                            command = self.changeTvsys)
            self.rbTvsys[tvsys].grid(sticky=NW)
        self.varTvsys.set('NTSC')
    
    def changeTvsys(self):
        """Event handler called when TV system radio buttons are clicked."""
        print "TV system: %s" % self.varTvsys.get()
        
    def getOptions(self):
        return "-%s " % str(self.varTvsys.get()).lower()


class OutfileFrame(Frame):
    """A frame containing an output-file text entry/browser box."""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.filename = StringVar() # Current output filename
        self.grid()
        self.drawWidgets()
    
    def drawWidgets(self):
        self.labelOutfile = Label(self, text="Output file:")
        self.labelOutfile.pack(side=LEFT)
        self.entryOutfile = Entry(self, width=20, textvariable=self.filename)
        self.entryOutfile.pack(side=LEFT)
        self.buttonBrowse = Button(self, text="Browse...",
                                   command=self.onBrowse)
        self.buttonBrowse.pack(side=LEFT)
        
    def onBrowse(self):
        pass

    def getOptions(self):
        return "-out %s" % self.filename.get()


class FileListFrame(Frame):
    """A frame containing a list of filenames, and controls to add or delete
    files from the list.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.curtitle = StringVar()  # Text of the currently selected title
        self.files = Variable()      # List of current files
        self.titles = Variable()     # List of current titles
        self.curindex = 0
        self.grid()
        self.drawWidgets()

    def drawWidgets(self):
        # List box and add/remove buttons
        self.labelFiles = Label(self, text="Files")
        self.labelFiles.grid(row=0, column=0, columnspan=2, sticky=W)
        self.listFiles = Listbox(self, width=30, selectmode=EXTENDED,
                                 listvariable=self.files)
        self.listFiles.grid(row=1, column=0, columnspan=2)
        self.buttonAdd = Button(self, text="Add...", command=self.addFiles)
        self.buttonAdd.grid(row=2, column=0, sticky=E+W)
        self.buttonDelete = Button(self, text="Remove",
                                   command=self.deleteFiles)
        self.buttonDelete.grid(row=2, column=1, sticky=E+W)
        # Title list box
        self.labelTitles = Label(self, text="Titles")
        self.labelTitles.grid(row=0, column=3, sticky=W)
        self.listTitles = Listbox(self, width=30, listvariable=self.titles)
        self.listTitles.bind('<ButtonRelease-1>', self.selectTitle)
        self.listTitles.grid(row=1, column=3)
        self.entryTitle = Entry(self, width=30, textvariable=self.curtitle)
        self.entryTitle.bind('<Return>', self.setTitle)
        self.entryTitle.grid(row=2, column=3)

    def selectTitle(self, event=None):
        """Event handler when a title in the title list is selected."""
        selected = self.listTitles.curselection()
        if len(selected) > 0:
            self.curindex = selected[0]
            self.curtitle.set(self.listTitles.get(self.curindex))

    def setTitle(self, event=None):
        """Event handler when Enter is pressed after editing a title."""
        newtitle = self.curtitle.get()
        print "Setting title to '%s'" % newtitle
        self.listTitles.delete(self.curindex)
        self.listTitles.insert(self.curindex, newtitle)
        
    def addFiles(self):
        """Event handler for adding files to the list box"""
        files = tkFileDialog.askopenfilenames(parent=self, title='Add files')
        for file in files:
            print "Adding '%s' to the file list" % file
            self.listFiles.insert(END, file)
            # Add a dummy title (with pathname removed)
            title = file.split('/')[-1]
            self.listTitles.insert(END, title)

    def deleteFiles(self):
        """Event handler for deleting files from the list box"""
        selection = self.listFiles.curselection()
        # Using reverse order prevents reflow from messing up indexing
        for line in reversed(selection):
            print "Removing '%s' from the file list" % self.listFiles.get(line)
            self.listFiles.delete(line)
            self.listTitles.delete(line)

    def getOptions(self):
        return "-files '%s' -titles '%s' " % \
             ("' '".join(self.files.get()), "' '".join(self.titles.get()))


# ============================
#
# Main application window
#
# ============================

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.drawWidgets()
        
    def drawWidgets(self):
        self.filelist = FileListFrame(self)
        self.filelist.grid(row=0, column=0)

        self.outfile = OutfileFrame(self)
        self.outfile.grid(row=1, column=0, sticky=EW)

        self.format = FormatFrame(self)
        self.format.grid(row=0, column=1, sticky=N)

        self.tvsys = TvsysFrame(self)
        self.tvsys.grid(row=0, column=2, sticky=N)
        
        self.buttonCommand = Button(self, text="Print command",
                                    command=self.showCommand)
        self.buttonCommand.grid()
        self.buttonQuit = Button(self, text="Quit", command=self.quit)
        self.buttonQuit.grid()

    def showCommand(self):
        cmd = "todisc "
        cmd += self.format.getOptions()
        cmd += self.tvsys.getOptions()
        cmd += self.filelist.getOptions()
        cmd += self.outfile.getOptions()
        print cmd

# ============================
#
# Entry point
#
# ============================

if __name__ == '__main__':
    app = Application()
    app.master.title("tktovid")
    app.mainloop()
