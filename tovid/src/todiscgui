#! /usr/bin/env python
# todiscgui

"""A Tkinter graphical user interface for todisc.

Each Frame class has a grouping of todisc options in tkinter widget form.
Frame subclasses define a getOptions method that appends command-line
options to a Command, raising exceptions if required options are missing.
"""

import os
import sys
import time
import re
import shlex
from libtovid.cli import Command
from libtovid.metagui import *
from libtovid import log


try:
    import Tkinter as tk
    import tkFileDialog
    import tkMessageBox
except:
    import traceback
    traceback.print_exc()
    print "Could not import Tkinter. You may need to do the following:"
    print "  Debian: Install 'python-tk'"
    print "  Gentoo: Add 'tk' to python USE flags"
    print "  Fedora: Install 'tkinter'"
    sys.exit()


general = Panel("General",
    # (option, Metawidget, label, default, help, ...),
    ('showcase', Filename,
        'Showcase', '',
        'Image or video file to be showcased in a large central frame',
        'load', 'Select an image or video file.'),
    ('background', Filename,
        'Background', '',
        'Image or video displayed in the background of the main menu',
        'load', 'Select an image or video file'),
    ('bgaudio', Filename,
        'Audio', '',
        'Audio file played while the main menu is showing',
        'load', 'Select an audio file'),
    ('submenus', Flag,
        'Create submenus', False,
        'TOOLTIP'),
    ('static', Flag,
        'Static menus (takes less time)', False,
        'TOOLTIP'),
    ('menu-title', Text,
        'Menu title', '',
        'Title of the main menu'),
    ('menu-length', Number,
        'Menu length', 30,
        'Duration of menu in seconds',
        0, 120, 'scale'),
    ('keep-files', Flag,
        'Keep useful intermediate files on exit', False,
        'TOOLTIP'),
    ('no-ask', Flag,
        'No prompts for questions', False,
        'TOOLTIP'),
    ('no-warn', Flag,
        'Do not pause at warnings', False,
        'TOOLTIP'),
    ('use-makemenu', Flag,
        'Use makemenu', False,
        'Create menus using the makemenu script instead of todisc'),
    ('tovidopts', Text,
        'Custom tovid options', '',
        "Space-separated list of options to pass to tovid for encoding.")
)

menu = Panel("Menu",
    # (option, Metawidget, label, default, help, ...),
    ('ani-submenus', Flag,
        'Animated submenus (takes more time)', False,
        'TOOLTIP'),
    ('menu-fade', Flag,
        'Fade in menu', False,
        'TOOLTIP'),
    ('seek', List,
        'Seek time', '',
        'Play thumbnail videos from the given seek time (seconds)'),
    ('bgvideo-seek', Number,
        'Background video seek time', 2,
        'Play background video from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('bgaudio-seek', Number,
        'Background audio seek time', 2,
        'Play background audio from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('showcase-seek', Number,
        'Showcase video seek time', 2,
        'Play showcase video from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('align', Choice,
        'Montage alignment', 'north',
        'Controls positioning of the thumbnails and their titles',
        'north|south|east|west'),
    ('intro', Filename,
        'Intro video', '',
        'Video to play before showing the main menu',
        'load', 'Select a video file'),
    ('showcase-titles-align', Choice,
        'Video(s) title alignment', 'west',
        'TOOLTIP',
        'west|east|center'),
    ('showcase-framestyle', Choice,
        'Showcase frame style', 'none',
        'TOOLTIP',
        'none|glass'),
    ('showcase-geo', Text,
        'Showcase image position (XxY', '',
        'TOOLTIP')
)

thumbnails = Panel("Thumbnails",
    # (option, Metawidget, label, default, help, ...),
    ('3dthumbs', Flag,
        'Create 3D thumbs', False,
        'TOOLTIP'),
    ('thumb-shape', Choice,
        'Thumb shape', 'normal',
        'TOOLTIP',
        'normal|oval|plectrum|egg'),
    ('opacity', Number,
        'Thumbnail opacity', 100,
        'TOOLTIP',
        1, 100, 'spin'),
    ('blur', Number,
        'Blur', 4,
        'TOOLTIP',
        1, 5, 'spin'),
    ('rotate-thumbs', List,
        'Rotate Thumbs (list)', '',
        'TOOLTIP'),
    ('wave', Text,
        'Wave effect for showcase thumb', 'default',
        'TOOLTIP'),
    ('rotate', Number,
        'Rotate Showcase thumb', 5,
        'TOOLTIP',
        -30, 30, 'spin'),
    ('thumb-mist-color', Color,
        'Thumb mist color', 'white',
        'TOOLTIP'),
    ('tile3x1', Flag,
        'Arrange thumb montage in 1 row of 3 thumbs', False,
        'TOOLTIP')
)

audio = Panel("Audio",
    # (option, Metawidget, label, default, help, ...),
    ('menu-audio-length', Number,
        'Menu audio length', 30,
        'TOOLTIP',
        0, 120, 'scale'),
    ('menu-audio-fade', Number,
        'Menu audio fade', 1,
        'TOOLTIP',
        0, 10, 'scale'),
    ('submenu-audio', Filename,
        'Submenu audio file', '',
        'TOOLTIP',
        'load', 'Select an audio file, or video file with audio'),
    ('submenu-audio-length', Number,
        'Submenu audio length', 30,
        'TOOLTIP',
        0, 120, 'scale'),
    ('submenu-audio-fade', Number,
        'Submenu audio fade', 1,
        'TOOLTIP',
        0, 10, 'scale')
)

text = Panel("Text and Font",
    # (option, Metawidget, label, default, help, ...),
    ('menu-font', Font,
        'Menu title font', 'Helvetica',
        'TOOLTIP'),
    ('thumb-font', Font,
        'Video title(s) font', 'Helvetica',
        'TOOLTIP'),
    ('menu-fontsize', Number,
        'Menu title font size', 20,
        'TOOLTIP',
        0, 80, 'scale'),
    ('thumb-fontsize', Number,
        'Video title(s) font size', 12,
        'TOOLTIP',
        0, 80, 'scale'),
    ('title-color', Color,
        'Title color', '',
        'TOOLTIP'),
    ('submenu-title-color', Color,
        'Submenu title color', '',
        'TOOLTIP'),
    ('thumb-text-color', Color,
        'Video title(s) color', '',
        'TOOLTIP'),
    ('text-mist', Flag,
        'Text mist', False,
        'TOOLTIP'),
    ('text-mist-color', Color,
        'Text mist color', '',
        'TOOLTIP'),
    ('text-mist-opacity', Number,
        'Text mist opacity', 60,
        'TOOLTIP',
        1, 100, 'spin'),
    ('menu-title-geo', Choice,
        'Menu title position', 'south',
        'TOOLTIP',
        'north|south|west|east|center'),
    ('menu-title-offset', Text,
        'Offset for menu title position', '+0+0',
        'TOOLTIP'),
    ('stroke-color', Color,
        'Stroke color', '',
        'TOOLTIP'),
    ('submenu-stroke-color', Color,
        'Submenu stroke color', '',
        'TOOLTIP'),
    ('title-gap', Number,
        'Space between Textmenu titles (pixels)', 2,
        'TOOLTIP',
        0, 400, 'spin'),
    ('text-start', Number,
        'Start Textmenu titles at: (pixels)', 2,
        'TOOLTIP',
        0, 460, 'spin')
)

authoring = Panel("Authoring",
    # (option, Metawidget, label, default, help, ...),
    ('chapters', List,
        'Number of Chapters', '',
        'Single value or list'),
    ('chain-videos', List,
        'Chain videos together', '',
        'See "man todisc" for details'),
    ('widescreen', Choice,
        'Widescreen', None,
        'TOOLTIP',
        'nopanscan|noletterbox'),
    ('aspect', Choice,
        'Aspect ratio', '4:3',
        'TOOLTIP',
        '4:3|16:9'),
    ('highlight-color', Color,
        'Highlight color', '',
        'TOOLTIP'),
    ('select-color', Color,
        'Selection color', '',
        'TOOLTIP'),
    ('button-style', Choice,
        'Button style', 'rect',
        'TOOLTIP',
        'rect|text|text-rect'),
    ('audio-lang', List,
        'Default audio language', '',
        'Single value or list'),
    ('subtitles', List,
        'Default subtitle language', '',
        'Single value or list'),
    ('outlinewidth', Number,
        'Outlinewidth for spumux buttons', 4,
        'TOOLTIP',
        0, 20, 'scale'),
    ('loop', Number,
        'Loop', 10,
        'TOOLTIP',
        0, 30, 'scale'),
    ('playall', Flag,
        '"Play all" button', False,
        'TOOLTIP')
)

burning = Panel("Burning",
    # ('option', Metawidget, label, default, help, ...)
    ('device', Text,
        'Burning device', '/dev/dvdrw',
        'TOOLTIP'),
    ('speed', Number, 
        'Burning speed', 2,
        'TOOLTIP',
        0, 52, 'scale'),
    ('label', Text,
        'DISC_LABEL\nfor volume ID', '',
        'TOOLTIP'),
    ('outputdir', Text,
        'Directory (DVD)\nor file (SVCD)', '',
        'TOOLTIP'),
    ('no-warn', Flag,
        'Do not pause at warnings', False,
        'TOOLTIP'),
    ('keep-files', Flag,
        'Keep useful intermediate files on exit', False,
        'TOOLTIP')
)

advanced_panels = [
    general,
    menu,
    thumbnails,
    audio,
    text,
    authoring,
    burning
]

# To be fixed
LABELS = {
    'showcaseonlylabel':
        (PlainLabel, 'The following options apply to Showcase style only'),
    'defaultonlylabel':
        (PlainLabel, 'The following options apply to the Default style only'),
    'textmenuonlylabel':
        (PlainLabel, 'The following options apply to the Textmenu style only'),
    'showcaseOrTextmenulabel':
        (PlainLabel, 'The following options apply to Showcase and Textmenu style only'),
    'dvdonlylabel':
        (PlainLabel, 'The following options apply to DVD burning only'),
    'spacer':
        (PlainLabel, '')
    }


### --------------------------------------------------------------------
### Exceptions
### --------------------------------------------------------------------

class MissingOption (Exception):
    """Raised when a required command-line option was not specified.

        message: Brief description of the missing option
        widget: A tkinter Widget where the option can be set
    """
    def __init__(self, message, widget=None):
        self.message = message
        self.widget = widget


### --------------------------------------------------------------------
### Helper functions
### --------------------------------------------------------------------

def pretty_todisc(command, type='default'):
    """Return a prettified version of a given todisc Command."""
    assert isinstance(command, Command)
    result = ['%s' % command.args[0]]
    opts = command.args[1:]
    while opts:
        arg = str(opts.pop(0))
        if type == 'burn':
            if arg == app.outfile.outfile.get() or arg.startswith('-'):
                result.append(arg)
            else:
                result[-1] += ' ' + arg
        else:
            if arg.startswith('-') and not re.match('^[-+]?[0-9]+$', arg):
                result.append(arg)
            else:
                result[-1] += ' ' + arg
    return '\n'.join(result)

def blink(widget):
    """Cause a widget to "blink" by briefly changing its background color.
    """
    if widget == None:
        return
    assert isinstance(widget, tk.Widget)
    widget.config(background='#C0C0F0')
    widget.update()
    time.sleep(1)
    widget.config(background='white')


### --------------------------------------------------------------------
### Frames containing related control widgets
### --------------------------------------------------------------------

class MenuChoice (tk.Frame):
    """A frame for setting which Menu template will be used"""
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.style = tk.StringVar()     # Menu arrangement variable
        self.drawWidgets()

    def drawWidgets(self):
        group = tk.LabelFrame(self, text="Menu arrangement")
        # TODO: Disable showcase file widget for default style
        self.showcase = {}
        self.showcase['default'] = \
            tk.Radiobutton(group, text="Default style", value="default",
                        variable=self.style, command=self.changeStyle)
        self.showcase['showcase'] = \
            tk.Radiobutton(group, text="Showcase style", value="showcase",
                        variable=self.style, command=self.changeStyle)
        self.showcase['textmenu'] = \
            tk.Radiobutton(group, text="Textmenu style", value="textmenu",
                        variable=self.style, command=self.changeStyle)
        for style in self.showcase:
            self.showcase[style].pack(anchor='w')

        self.filename = Filename("Showcase file", '', 'TOOLTIP',
                                 'load', "Select an image or video file.")
        self.filename.draw(group)
        self.filename.pack(anchor='w', fill='x', expand=True)

        self.colsize = Number("Textmenu column break", 15, 'TOOLTIP',
                              2, 15, 'spin')
        self.colsize.draw(group)
        self.colsize.pack(anchor='w')

        self.style.set('default')
        self.changeStyle()

        group.pack(fill='x', expand=True)

    def changeStyle(self):
        """Change showcase styles, and enable suitable widgets."""
        style = self.style.get()
        if style == 'default':
            self.filename.disable()
            self.colsize.disable()
        else:
            self.filename.enable()
            if style == 'textmenu':
                self.colsize.enable()
            else:
                self.colsize.disable()

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        style = self.style.get()
        filename = self.filename.get()
        colsize = self.colsize.get()
        if colsize == 15:
            colsize = ''
        if style in ['showcase', 'textmenu']:
            if filename:
                command.add('-showcase', filename)
            else:
                if style == 'showcase':
                    command.add('-showcase')
        if style == "textmenu":
            command.add('-textmenu', colsize)


class Format (tk.Frame):
    """A frame with a choice of formats (DVD, SVCD)
    """
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.format = Choice("Disc format", 'DVD', 'TOOLTIP', 'DVD|SVCD')
        self.format.draw(self)
        self.format.pack()

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        format = str(self.format.get()).lower()
        command.add('-%s' % format)

    def getFormat(self):
        """Return the disc format we are using"""
        disc_format = str(self.format.get()).lower()
        return disc_format

### --------------------------------------------------------------------

class Tvsys (tk.Frame):
    """A frame with a choice of TV system (PAL, NTSC)
    """
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.tvsys = Choice("TV system", 'NTSC', 'TOOLTIP', 'NTSC|PAL')
        self.tvsys.draw(self)
        self.tvsys.pack()

    def setOptions(self, command):
        tvsys = str(self.tvsys.get()).lower()
        command.add('-%s' % tvsys)
    
### --------------------------------------------------------------------

class FilesTitles (tk.Frame):
    """A frame containing a list of filenames, and controls to add or delete
    files from the list.
    """
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.curtitle = tk.StringVar()  # Text of the currently selected title
        self.varFiles = tk.Variable()   # List of current files
        self.varTitles = tk.Variable()  # List of current titles
        self.varUsage = tk.StringVar()  # String describing current space usage
        self.curindex = 0
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Scrollbar to control both listboxes
        self.scrollbar = tk.Scrollbar(self, orient='vertical')
        self.scrollbar.grid(row=1, column=3, sticky='ns')
        self.scrollbar.config(command=self.scroll)
        # File list box and add/remove buttons
        self.lblFiles = tk.Label(self, text="Files")
        self.lblFiles.grid(row=0, column=0, columnspan=2, sticky='w')
        self.lstFiles = tk.Listbox(self, width=30,
                                   listvariable=self.varFiles,
                                   yscrollcommand=self.scrollbar.set)
        self.lstFiles.bind('<Button-1>', self.selectListitem)
        self.lstFiles.bind('<B1-Motion>', self.dragListitem)
        self.lstFiles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstFiles.grid(row=1, column=0, columnspan=2)
        self.btnAdd = tk.Button(self, text="Add...", command=self.addFiles)
        self.btnAdd.grid(row=2, column=0, sticky='ew')
        self.btnRemove = tk.Button(self, text="Remove",
                                   command=self.removeFiles)
        self.btnRemove.grid(row=2, column=1, sticky='ew')
        # Title list box and editing field
        self.lblTitles = tk.Label(self, text="Titles")
        self.lblTitles.grid(row=0, column=2, sticky='w')
        self.lstTitles = tk.Listbox(self, width=30,
                                    listvariable=self.varTitles,
                                    yscrollcommand=self.scrollbar.set)
        self.lstTitles.bind('<Button-1>', self.selectListitem)
        self.lstTitles.bind('<B1-Motion>', self.dragListitem)
        self.lstTitles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstTitles.grid(row=1, column=2)
        self.entTitle = tk.Entry(self, width=30,
                                 textvariable=self.curtitle)
        self.entTitle.bind('<Return>', self.setTitle)
        self.entTitle.grid(row=2, column=2)
        # Disc usage total
        self.lblUsage = tk.Label(self, textvariable=self.varUsage)
        self.lblUsage.grid(row=0, column=1, columnspan=2, sticky='e')
        self.updateUsage()

    def scroll(self, *args):
        """Event handler when scrollbar is moved."""
        apply(self.lstFiles.yview, args)
        apply(self.lstTitles.yview, args)

    def selectListitem(self, event):
        """Event handler when a filename or title in the list is selected.
        Set the title box for editing and change the mouse cursor."""
        self.curindex = self.lstFiles.nearest(event.y)
        self.curtitle.set(self.lstTitles.get(self.curindex))
        self.config(cursor="double_arrow")

    def onDrop(self, event):
        """Event handler called when an item is "dropped" (mouse-release).
        Change the mouse cursor back to the default arrow.
        """
        self.config(cursor="")

    def dragListitem(self, event):
        """Event handler to move a file/title to another position in the list"""
        loc = self.lstFiles.nearest(event.y)
        if loc != self.curindex:
            file = self.lstFiles.get(self.curindex)
            title = self.lstTitles.get(self.curindex)
            self.lstFiles.delete(self.curindex)
            self.lstTitles.delete(self.curindex)
            self.lstFiles.insert(loc, file)
            self.lstTitles.insert(loc, title)
            self.curindex = loc

    def setTitle(self, event):
        """Event handler when Enter is pressed after editing a title."""
        newtitle = self.curtitle.get()
        log.debug("Setting title to '%s'" % newtitle)
        self.lstTitles.delete(self.curindex)
        self.lstTitles.insert(self.curindex, newtitle)

    def addFiles(self):
        """Event handler for adding files to the list box"""
        files = tkFileDialog.askopenfilenames(parent=self, title='Add files')
        for file in files:
            log.debug("Adding '%s' to the file list" % file)
            self.lstFiles.insert('end', file)
            # Add a dummy title (with pathname and extension removed)
            title = os.path.basename(file)[0:-4]
            self.lstTitles.insert('end', title)
        self.updateUsage()

    def getUsage(self):
        """Return the total size, in bytes, consumed by the current list
        of files."""
        total = 0
        for file in self.varFiles.get():
            total += os.path.getsize(file)
        return total
    
    def updateUsage(self):
        """Update the disc space usage label."""
        usage = self.getUsage() / (1024 * 1024)
        self.varUsage.set("%s MB used" % usage)

    def removeFiles(self):
        """Event handler for removing files from the list box"""
        selection = self.lstFiles.curselection() \
                  or self.lstTitles.curselection()
        # Using reverse order prevents reflow from messing up indexing
        for line in reversed(selection):
            log.debug("Removing '%s' from the file list" %\
                      self.lstFiles.get(line))
            self.lstFiles.delete(line)
            self.lstTitles.delete(line)
        self.updateUsage()
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        files = self.varFiles.get()
        titles = self.varTitles.get()
        if len(files) != len(titles):
            # Should never happen, if the listboxes are properly in sync
            raise Exception, "Number of files and titles do not match"
        if len(files) == 0:
            raise MissingOption("File list (-files)", self.lstFiles)
        if len(titles) == 0:
            raise MissingOption("Title list (-titles)", self.lstTitles)
        command.add('-files', *files)
        command.add('-titles', *titles)

### --------------------------------------------------------------------

class Backgrounds (tk.Frame):
    """Widgets for setting background image or video and audio"""
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        label = tk.Label(self, text="Menu backgrounds")
        label.pack(anchor='w')
        self.visual = Filename("Image or video", '', 'TOOLTIP',
                               'load', "Select an image or video file")
        self.audio = Filename("Audio", '', 'TOOLTIP',
                              'load', "Select an audio file")
        self.visual.draw(self)
        self.audio.draw(self)
        self.visual.pack(anchor='e', fill='x', expand=True)
        self.audio.pack(anchor='e', fill='x', expand=True)
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        visual = self.visual.get()
        audio = self.audio.get()
        if visual:
            command.add('-background', visual)
        if audio:
            command.add('-bgaudio', audio)

### --------------------------------------------------------------------

class Outfile (tk.Frame):
    """A frame containing an output-file text entry/browser box."""
    def __init__(self, master=None):
        tk.Frame.__init__(self, master, relief='groove')
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.outfile = Filename("Output file", '', 'TOOLTIP',
                                'save', "Select an output name.")
        self.outfile.draw(self)
        self.outfile.pack(side='left', pady=2, fill='x', expand=True)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        outfile = self.outfile.get()
        if not outfile:
            log.warning("No output file selected")
            raise MissingOption("Output filename (-out)", self.outfile.entry)
        command.add('-out', outfile)

### --------------------------------------------------------------------

class Title (tk.Frame):
    """A frame containing options for customizing titles"""
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.drawWidgets()
        
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.title = Text("Menu title", "My video collection", 'TOOLTIP')
        self.title.draw(self)
        self.title.pack(side='right', pady=4, fill='x', expand=True)
        # self.title.set("My video collection")

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        title = self.title.get()
        if title:
            command.add('-menu-title', title)
        else:
            command.add('-menu-title', ' ')

### --------------------------------------------------------------------

class MiscOptions (tk.Frame):
    """A frame containing miscellaneous options"""
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.static = Flag("Static menus (takes less time)", False,
                           'TOOLTIP')
        self.static.draw(self)
        self.submenus = Flag("Create submenus (takes more time)", False,
                             'TOOLTIP')
        self.submenus.draw(self)
        self.custom = Text("Custom todisc options", '', 'TOOLTIP')
        self.custom.draw(self)
        self.static.pack(anchor='w')
        self.submenus.pack(anchor='w')
        self.custom.pack(anchor='w', fill='x', expand=True)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        if self.static.get():
            command.add('-static')
        if self.submenus.get():
            command.add('-submenus')
        if self.custom.get():
            options = shlex.split(self.custom.get())
            for opt in options:
                command.add(opt)

### --------------------------------------------------------------------

class Advanced (tk.Frame):
    """A frame containing controls for setting advanced options.
    """
    def __init__(self, master=None, options="", label_text="Advanced Options"):
        tk.Frame.__init__(self, master, borderwidth=5)
        # Create the tab bar and pack the first frame
        tabs = Tabs(self, 'left')
        for panel in advanced_panels:
            tabs.add(panel.title, panel.get_widget(tabs))
        tabs.draw()
        tabs.pack()
        #self.pack_propagate(False)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        for panel in advanced_panels:
            args = panel.get_options()
            command.add(*args)


    # TODO: Refactor burn tab stuff
    #def setFormatOpts(self):
        #"""Set some dynamic vars for when options pane is selected"""
        #disc_format = app.format.getFormat()
        #outfile = app.outfile.outfile
        #for option, widget in self.widgets.items():
            #value = widget.get()
            #if option == "outputdir":
                #if outfile.get():
                    #widget.set(outfile.get())
            #if option == "device":
                #if disc_format == 'svcd':
                    #burn_device = '/dev/cdrw'
                #else:
                    #burn_device = '/dev/dvdrw'
                #widget.set(burn_device)        

    #def setBurnOptions(self, burnCmd):
        #"""Add relevant burning options to the given Command."""
        #disc_format = app.format.getFormat()
        #outfile = app.outfile.outfile
        #outfile = outfile.get()
        #for option, widget in self.widgets.items():
            #if option in burning_options:
                #if option != 'outputdir':
                    #value = widget.get()
                    #if value == True:
                        #burnCmd.add('-%s' % option)
                    #elif value:
                        #burnCmd.add('-%s' % option, value)
        #if not outfile:
            #log.warning("No directory or file selected in the 'Output file' selector")
        #else:
            #if disc_format == 'svcd':
                #burnCmd.add('-burn')    
            #burnCmd.add(outfile)

### --------------------------------------------------------------------
### Main application window
### --------------------------------------------------------------------

class GUI (tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.show_advanced = tk.BooleanVar()
        self.pack()
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        group = tk.Frame(self)
        self.title = Title(group)
        self.files = FilesTitles(group)
        self.format = Format(group)
        self.tvsys = Tvsys(group)
        self.menuformat = MenuChoice(group)
        self.backgrounds = Backgrounds(group)
        self.misc = MiscOptions(group)
        self.outfile = Outfile(group)
        group.pack(side='left', padx=6, pady=6)
        # Pack widgets in main frame
        self.title.pack(fill='x', expand=True)
        self.files.pack(anchor='w')
        self.format.pack(anchor='w')
        self.tvsys.pack(anchor='w')
        self.menuformat.pack(anchor='w', fill='x', expand=True)
        self.backgrounds.pack(anchor='w', fill='x', expand=True)
        self.misc.pack(anchor='w', fill='x', expand=True)
        self.outfile.pack(anchor='w', fill='x', expand=True)
        # Add the menu
        self.makeMenu()

        # Create advanced tabs but don't pack them yet
        self.advanced = Advanced(self)
        self.show_advanced.set(False)

    def showhide(self):
        """Show or hide the advanced options tabs."""
        if self.show_advanced.get():
            self.advanced.pack(anchor='nw', side='left')
        else:
            self.advanced.pack_forget()

    #def showitem(self, widget_list, _label):
        #"""show frame, and set vars so we know it is shown, hide previously
        #shown frame if exists (with hideOptionsPane()))
        #"""
        #if _label == "menu":
            #self.hideOptionsPane(_label)
            #self.fraAdvMenu.pack(anchor='nw', side='left')
            #self.AdvMenuShown=True
        #elif _label == "thumb":                
            #self.hideOptionsPane(_label)
            #self.fraAdvThumb.pack(anchor='nw', side='left')
            #self.AdvThumbShown=True
        #elif _label == "audio":                
            #self.hideOptionsPane(_label)
            #self.fraAdvAudio.pack(anchor='nw', side='left')
            #self.AdvAudioShown=True
        #elif _label == "font":                
            #self.hideOptionsPane(_label)
            #self.fraAdvFont.pack(anchor='nw', side='left')
            #self.AdvFontShown=True
        #elif _label == "dvd":                
            #self.hideOptionsPane(_label)
            #self.fraAdvDvd.pack(anchor='nw', side='left')
            #self.AdvDvdShown=True
        #elif _label == "general":                
            #self.hideOptionsPane(_label)
            #self.fraAdvGeneral.pack(anchor='nw', side='left')
            #self.AdvGeneralShown=True
        #elif _label == "burn":                
            #self.hideOptionsPane(_label)
            #self.fraAdvBurn.pack(anchor='nw', side='left')
            #self.fraAdvBurn.setFormatOpts()
            #self.AdvBurnShown=True
        #elif _label == "hide":                
            #self.hideOptionsPane(_label)

    def makeMenu(self):
        """Create the menu for the application"""
        # create a menubar
        menubar = tk.Menu(self)
        # create a pulldown menu, and add it to the menu bar
        filemenu = tk.Menu(menubar, tearoff=False)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=root.quit)
        menubar.add_cascade(label="File", menu=filemenu)

        viewmenu = tk.Menu(menubar, tearoff=False)
        viewmenu.add_checkbutton(label="Advanced",
                    variable=self.show_advanced,
                    command=self.showhide)
        menubar.add_cascade(label="View", menu=viewmenu)

        #editmenu = tk.Menu(menubar, tearoff=True)
        #editmenu.add_separator()
        #editmenu.add_command(label="Show/hide", self.showAdvanced)
        #menubar.add_cascade(label="Advanced", menu=editmenu)

        runmenu = tk.Menu(menubar, tearoff=False)
        runmenu.add_command(label="Run todisc now !", command=self.runCommand)
        menubar.add_cascade(label="Run", menu=runmenu)

        #burnmenu = tk.Menu(menubar, tearoff=False)
        #burnmenu.add_command(label="Options", command=lambda:self.showitem(burning_options, "burn"))
        #burnmenu.add_separator()
        #burnmenu.add_command(label="Burn it now !", command=self.runBurnCommand)
        #menubar.add_cascade(label="Burn", menu=burnmenu)

        root.config(menu=menubar)

    #def hideOptionsPane(self, _label):
        #"""Hide the current options panel when a new one (or the hide button), is selected"""
        #if self.AdvMenuShown:
            #self.fraAdvMenu.pack_forget()
            #self.AdvMenuShown=False
        #if self.AdvThumbShown:
            #self.fraAdvThumb.pack_forget()
            #self.AdvThumbShown=False
        #if self.AdvAudioShown:
            #self.fraAdvAudio.pack_forget()
            #self.AdvAudioShown=False
        #if self.AdvFontShown:
            #self.fraAdvFont.pack_forget()
            #self.AdvFontShown=False
        #if self.AdvDvdShown:
            #self.fraAdvDvd.pack_forget()
            #self.AdvDvdShown=False
        #if self.AdvGeneralShown:
            #self.fraAdvGeneral.pack_forget()
            #self.AdvGeneralShown=False
        #if self.AdvBurnShown:
            #self.fraAdvBurn.pack_forget()
            #self.AdvBurnShown=False

    def getCommand(self):
        """Return the complete todisc command."""
        cmd = Command('todisc')
        frames = [
            self.title,
            self.files,
            self.format,
            self.tvsys,
            self.menuformat,
            self.backgrounds,
            self.misc,
            self.outfile,
            self.advanced]
        for frame in frames:
            try:
                frame.setOptions(cmd)
            except MissingOption, err:
                log.error("Missing a required option: %s" % err.message)
                raise
        return cmd

    def getBurnCommand(self):
        """Return the complete burning command."""
        disc_format = self.format.getFormat()
        if disc_format == 'svcd':
            burn_program='makevcd'
        elif disc_format == 'dvd':
            burn_program = 'makedvd'
        burnCmd = Command(burn_program)
        self.fraAdvBurn.setBurnOptions(burnCmd)
        return burnCmd

    def runCommand(self):
        """Run the todisc command."""
        try:
            cmd = self.getCommand()
        except MissingOption, err:
            tkMessageBox.showerror("Missing option",
                                   "Missing a required option: %s" % err.message)
            blink(err.widget)
            return
        # Show pretty-printed command
        pretty_cmd = pretty_todisc(cmd)
        log.info("Running command:")
        log.info(pretty_cmd)
        # Verify with user
        if tkMessageBox.askyesno(message="Run todisc now?"):
            root.withdraw()
            try:
                cmd.run()
            except KeyboardInterrupt:
                tkMessageBox.showerror(message="todisc was interrupted!")
            else:
                tkMessageBox.showinfo(message="todisc finished running!")
            root.deiconify()

    def runBurnCommand(self):
        """Run the burning command"""
        burnCmd = self.getBurnCommand()
        outfile = app.outfile.outfile
        
#        log.info("Running command:")
#        log.info(burnCmd)
        format = self.format.getFormat()
        if format == 'dvd':
            burnProgram = 'makedvd'
        elif format == 'svcd':
            burnProgram = 'makevcd'
        text = "Running command:\n" + burnProgram
        if outfile.get():
            pretty_burnCmd = pretty_todisc(burnCmd, 'burn')
            log.info(text)
            log.info(pretty_burnCmd)
            if tkMessageBox.askyesno(message="Burn now ?"):
                root.withdraw()
                try:
                    print "Running: ", burnCmd
                    burnCmd.run()
                except KeyboardInterrupt:
                    tkMessageBox.showerror(message="todisc was interrupted!")
                else:
                    tkMessageBox.showinfo(message="burning complete !")
                root.deiconify()
        else:
            tkMessageBox.showerror("Missing option",
                                   "DVD directory or todisc outfile to burn\n"\
                                   "('Output file' box on main pane)")
            blink(outfile.entry)

def setTheme(theme='default'):
    """Set widget styles to match a theme. This must be called before
    widgets are created, and does not apply to widgets already created.
    """
    if theme == 'light':
        log.info("Using 'light' theme")
        log.info("(run 'todiscgui tk' for alternate theme)")
        root.option_add("*Entry.relief", 'groove')
        root.option_add("*Spinbox.relief", 'groove')
        root.option_add("*Listbox.relief", 'groove')
        root.option_add("*Button.relief", 'groove')
        root.option_add("*Menu.relief", 'groove')
        root.option_add("*font", ("Helvetica", 12))
        root.option_add("*Radiobutton.selectColor", "#8888FF")
        root.option_add("*Checkbutton.selectColor", "#8888FF")
        # Mouse-over effects
        root.option_add("*Button.overRelief", 'raised')
        root.option_add("*Checkbutton.overRelief", 'groove')
        root.option_add("*Radiobutton.overRelief", 'groove')
    else:  # theme == 'tk' or anything else
        log.info("Using 'tk' theme")
        log.info("(run 'todiscgui light' for alternate theme)")
        root.option_clear()
    # These apply to all themes
    root.option_add("*Scale.troughColor", 'white')
    root.option_add("*Spinbox.background", 'white')
    root.option_add("*Entry.background", 'white')
    root.option_add("*Listbox.background", 'white')

### --------------------------------------------------------------------
### Entry point
### --------------------------------------------------------------------

root = tk.Tk()
if __name__ == '__main__':
    # Single argument: theme name 'default' or 'light'
    theme = 'light'
    if len(sys.argv) > 1:
        theme = sys.argv[1]

    root.title("todisc GUI")
    #root.iconbitmap('@//work/svn/tovid/src/tovid_bw_32.xbm')
    setTheme(theme)
    app = GUI(root)
    root.update_idletasks()
    root.mainloop()

