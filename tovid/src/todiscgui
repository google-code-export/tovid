#! /usr/bin/env python
# todiscgui

"""A GUI for the todisc command-line program.

Usage:

    $ todiscgui

This GUI is written using the 'metagui' module from libtovid, a high-level
GUI design language that involves very little code.

See the wiki page about metagui for more details:

    http://tovid.wikia.com/wiki/Metagui

"""

# Get supporting classes from libtovid.metagui
from libtovid.metagui import *

### --------------------------------------------------------------------
### -files and -titles
### --------------------------------------------------------------------

"""todisc's -files and -titles options have a one-to-one correspondence.
Rather than make the user manually enter a title for each file, this
approach uses two lists, with one "dependent" on another via a filter.

Specifically, when the GUI user adds to -files, the corresponding
-titles should be automatically filled in with the filename, minus
pathname and extension.

In other words:
"""

import os
def to_title(filename):
    basename = os.path.basename(filename)
    firstdot = basename.find('.')
    return basename[0:firstdot]

files = FileList('-files',
    'Video files', None,
    'Video files to include on the disc',
    required=True)

titles = TextList('-titles',
    'Video titles', None,
    'Titles for each video',
    pull=files, # -titles is updated when -files is updated
    filter=to_title, # strip pathname and extension from filenames
    required=True)


### --------------------------------------------------------------------
### Main todisc options
### --------------------------------------------------------------------

main = Panel("Main",
    Text('-menu-title',
        'Menu title', 'My video collection',
        'Title text displayed on the main menu'),
    
    HPanel("Files and titles", files, titles),

    HPanel('',
        FlagGroup('Format', 'exclusive',
            Flag('-dvd', "DVD", True),
            Flag('-svcd', "SVCD", False)),
        FlagGroup('TV System', 'exclusive',
            Flag('-ntsc', "NTSC", True),
            Flag('-pal', "PAL", False))
        ),

    FlagGroup('Menu Style', '',
        Flag('-showcase', "Showcase style menu", False,
            "Arrange menu links along the outside edges, to leave room for" \
            " an optional 'showcase' image or video.",
            enables=Filename('',
               'Showcase', '',
               'Image or video file to be showcased in a large central frame',
               'load', 'Select an image or video file.')
        ),
        Flag('-textmenu', "Use text menu links (no thumbnails)", False,
            'Showcase style text only menu.  Optionally use a "showcase" ' \
            'image/video, or static/animated background.  See also ' \
            'quick-menu and switched menu in the "Menu" tab',
            enables=Number('',
                'Titles per column', 13,
                'Maximum number of titles per column',
                1, 50)
        )
    ),
    VPanel('Menu backgrounds',
          Filename('-background',
              'Image or video', '',
              'Graphic to display in the background of the main menu',
              'load', 'Select an image or video file'),
          Filename('-bgaudio',
              'Audio', '',
              'Audio file to play while the main menu is showing',
              'load', 'Select an audio file')
    ),

    VPanel('Animation and submenus',
    Flag('-static',
        'Static menus', False,
        'Create still-image menus; takes less time.  ' \
        'For duration of background audio for static '
        'menus, use "menu length" on the "Menu" tab'),
    Flag('-submenus',
        'Create Submenus', False,
        'Create a submenu for each video title; takes more time.'),
    Flag('-ani-submenus',
        'Animated submenus (takes more time)', False,
        'Create an animated submenu for each video.  ' \
        'Submenu links lead to chapter points.')
    ),

    List('',
        'Custom todisc options', '',
        'Space-separated list of custom options to pass to todisc.'),
    Filename('-out',
        'Output name', '',
        'Name to use for the output directory where the disc will be created.',
        'save', 'Choose an output name',
        required=True)
)

general = Panel("General",
    Flag('-keep-files',
        'Keep useful intermediate files on exit', False),
    Flag('-no-ask',
        'No prompts for questions', False),
    Flag('-no-warn',
        'Do not pause at warnings', False),
    Flag('-use-makemenu',
        'Use makemenu', False,
        'Create menus using the makemenu script instead of todisc'),
    Text('-tovidopts',
        'Custom tovid options', '',
        "Space-separated list of options to pass to tovid for encoding.")
)

menu = Panel("Menu",
    Number('-menu-length',
        'Menu length', 20,
        'Duration of menu in seconds',
        0, 120, 'scale'),
    Flag('-menu-fade',
        'Fade in menu', False,
        'Fade  the  menu  in  and out The background ' \
        ' will fade in first, then title ' \
        '(and mist if called for), then the menu thumbs.  ' \
        'The fadeout is in reverse order'),
    Flag('-quick-menu', "Make a quick animated showcase style menu.  ", False,
        "Ten times faster than normal showcase animation.  " \
        "A showcase image is required.  No video thumbs are made",
        ),
    Flag('-switched-menus', "Make switched menus", False,
        "This will make a showcase style menu with text menu links.  " \
        "The showcased VIDEO or IMAGE will be of each video 'title' " \
        " in the menu.  It is not necessary to select showcase or " \
        "the showcase image for this option."
        ),
    Panel("Seek times",
          List('-seek',
              'Seek time', '',
              'Play thumbnail videos from the given seek time (seconds)'),
          Number('-bgvideo-seek',
              'Background video seek time', 2,
              'Play background video from the given seek time (seconds)',
              0, 3600, 'scale'),
          Number('-bgaudio-seek',
              'Background audio seek time', 2,
              'Play background audio from the given seek time (seconds)',
              0, 3600, 'scale'),
          Number('-showcase-seek',
              'Showcase video seek time', 2,
              'Play showcase video from the given seek time (seconds)',
              0, 3600, 'scale')
    ),
    Choice('-align',
        'Montage alignment', 'north',
        'Controls positioning of the thumbnails and their titles',
        'north|south|east|west|center'),
    Filename('-intro',
        'Intro video', '',
        'Video to play before showing the main menu',
        'load', 'Select a video file'),
    Choice('-showcase-titles-align',
        'Video(s) title alignment', 'west',
        'This is a showcase style only option.  The default is to center ' \
        'the text above the thumbnails.  This option will align the titles ' \
        ' either to the left (west) or right  (east).  Aligning west gives ' \
        'more space to the titles.  Aligning east also does so, and as well ' \
        'will let you use "\\n" in your titles to achieve multi line titles.',
        'west|east|center'),
    Choice('-showcase-framestyle',
        'Showcase frame style', 'none',
        'This is a showcase style only option.  The "none" option will use the ' \
        'default  frame method, using "convert -frame  ...". The "glass" option ' \
        'will use mplayer to make frames, giving an animated effect.  The ' \
        'glass style can be much faster - epecially if used without -rotate and -wave options',
        'none|glass'),
    Text('-showcase-geo',
        'Showcase image position (XxY)', '',
        'This is a showcase style only option. ' \
        'Enter the position of the top left corner of the showcase image: e.g. "200x80"')
)

thumbnails = Panel("Thumbnails",
    Flag('-3dthumbs',
        'Create 3D thumbs', False,
        'This will give an illusion of 3D to the thumbnails: ' \
        'dynamic lighting on rounded thumbs, and a  raised ' \
        ' effect on rectangular thumbs'),
    Choice('-thumb-shape',
        'Thumb shape', 'normal',
        'Apply a shaped transparency mask to thumbnail videos. ' \
        'Note: to disable the "mist" background ' \
        'behind each thumb, use "none" for -thumb-mist-color.',
        'normal|oval|plectrum|egg'),
    Number('-opacity',
        'Thumbnail opacity', 100,
        'Opacity  of thumbnail videos as a percentage ' \
        '(no percent sign).  Less than 100(%) ' \
        'is semi-transparent.  Not recommended with dark backgrounds.',
        1, 100, 'spin'),
    Number('-blur',
        'Blur', 4,
        'The amount of feather blur to apply to the thumb-shape.  ' \
        'Default is 4.0 which will  more  or  less  keep  the shape, ' \
        'creating transparency at the edges.  Choose float or ' \
        'integer values between 0.1 and 5.0',
        1, 5, 'spin'),
    List('-rotate-thumbs',
        'Rotate Thumbs (list)', '',
        'Rotate  thumbs  the  given amount in degrees - can be positive ' \
        'or negative.  There must be one value for each file given with -files.  ' \
        'If the values are not the same distance from zero, the thumbs will be  ' \
        'of  different sizes as images are necessarily resized *after* rotating.'),
    Text('-wave',
        'Wave effect for showcase thumb', 'default',
        'Wave effect for showcase image|video.  Alters thumbs along a sine wave ' \
        'using the argument given.  The argument "default" will produce a wave arg ' \
        'of -20x556, which produces a gentle wave with a small amount of distortion.'),
    Number('-rotate',
        'Rotate Showcase thumb', 0,
        'Rotate the showcase image|video clockwise by this number of degrees.',
        -30, 30, 'spin'),
    Flag('', "", False,
        "",
    enables=Color('-thumb-mist-color',
        'Thumb mist color', 'white',
        'Color of mist behind thumbnails (not a showcase option).')),
    Flag('-thumb-mist-color', "Transparent thumb mist", False,
        ""),
    Flag('-tile3x1',
        'Arrange thumb montage in 1 row of 3 thumbs', False,
        'Use a montage tile of 3x1 instead of the usual 2x2 (for 3 videos only).')
)


audio = Panel("Audio",
    Number('-menu-audio-fade',
        'Menu audio fade', 1,
        'tooltip',
        0, 10, 'scale'),
    Filename('-submenu-audio',
        'Submenu audio file', '',
        'tooltip',
        'load', 'Select an audio file, or video file with audio'),
    Number('-submenu-audio-length',
        'Submenu audio length', 30,
        'tooltip',
        0, 120, 'scale'),
    Number('-submenu-audio-fade',
        'Submenu audio fade', 1,
        'tooltip',
        0, 10, 'scale')
)


text = Panel("Text/Font",
    Font('-menu-font',
        'Menu title font', 'Helvetica',
        'tooltip'),
    Font('-thumb-font',
        'Video title(s) font', 'Helvetica',
        'tooltip'),
    Number('-menu-fontsize',
        'Menu title font size', 20,
        'tooltip',
        0, 80, 'scale'),
    Number('-thumb-fontsize',
        'Video title(s) font size', 12,
        'tooltip',
        0, 80, 'scale'),
    Color('-title-color',
        'Title color', '',
        'tooltip'),
    Color('-submenu-title-color',
        'Submenu title color', '',
        'tooltip'),
    Color('-thumb-text-color',
        'Video title(s) color', '',
        'tooltip'),
    Panel("Mist",
        Flag('-text-mist',
            'Text mist', False,
            'tooltip'),
        Color('-text-mist-color',
            'Text mist color', '',
            'tooltip'),
        Number('-text-mist-opacity',
            'Text mist opacity', 60,
            'tooltip',
            1, 100, 'spin')
        ),
    Choice('-menu-title-geo',
        'Menu title position', 'south',
        'tooltip',
        'north|south|west|east|center'),
    Text('-menu-title-offset',
        'Offset for menu title position', '+0+0',
        'tooltip'),
    Color('-stroke-color',
        'Stroke color', '',
        'tooltip'),
    Color('-submenu-stroke-color',
        'Submenu stroke color', '',
        'tooltip'),
    Number('-title-gap',
        'Space between Textmenu titles (pixels)', 2,
        'tooltip',
        0, 400, 'spin'),
    Number('-text-start',
        'Start Textmenu titles at: (pixels)', 2,
        'tooltip',
        0, 460, 'spin')
)

authoring = Panel("Authoring",
    List('-chapters',
        'Number of Chapters', '',
        'Single value or list'),
    List('-chain-videos',
        'Chain videos together', '',
        'See "man todisc" for details'),
    Choice('-widescreen',
        'Widescreen', None,
        'tooltip',
        'nopanscan|noletterbox'),
    Choice('-aspect',
        'Aspect ratio', '4:3',
        'tooltip',
        '4:3|16:9'),
    Color('-highlight-color',
        'Highlight color', '',
        'tooltip'),
    Color('-select-color',
        'Selection color', '',
        'tooltip'),
    Choice('-button-style',
        'Button style', 'rect',
        'tooltip',
        'rect|text|text-rect'),
    List('-audio-lang',
        'Default audio language', '',
        'Single value or list'),
    List('-subtitles',
        'Default subtitle language', '',
        'Single value or list'),
    Number('-outlinewidth',
        'Outlinewidth for spumux buttons', 4,
        'tooltip',
        0, 20, 'scale'),
    Number('-loop',
        'Loop', 10,
        'tooltip',
        0, 30, 'scale'),
    Flag('-playall',
        '"Play all" button', False,
        'tooltip')
)

burning = Panel("Burning",
    Flag('-burn',
        'Burn project on completion', False),
    Number('-speed',
        'Burning speed', 8,
        'Speed for burning',
        0, 30, 'scale'),
    Filename('-device',
        'Device to use for burning', '/dev/dvdrw',
        'Select or type your burning device ( default /dev/dvdrw',
        'load', 'Select or type your burning device ( default /dev/dvdrw )'),
)

### --------------------------------------------------------------------
### Application and GUI
### --------------------------------------------------------------------

todisc = Application('todisc',
    [main, general, menu, thumbnails, audio, text, authoring, burning])
gui = GUI("todiscgui", [todisc], 600, 800)
gui.run()

