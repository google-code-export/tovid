#!/usr/bin/env python

from Tkinter import *
from tkFileDialog import askopenfilename
from subprocess import Popen, PIPE
import os.path
from libtovid.metagui import Style
from tkMessageBox import *
from time import sleep
from tempfile import mktemp

todisc_cmds = []
all_options = []
gen_cmd = []
tsets_cmds = []
vmgm_cmd = []
error_msg = 'This is not a saved GUI script\n' + \
  'Please select the file that you saved'
labels = ['General', 'VMGM menu', 'Titlesets']
curdir = os.path.abspath('')
newname = mktemp(suffix='.bash', prefix='todisc_commands.', dir=curdir)

def move(amt):
    global current
    ind = pages.index(current) + amt
    if not 0 <= ind < len(pages):
        return
    current.pack_forget()
    current = pages[ind]
    # when move is called, change the page number displayed
    pg1_label4.configure(text='Page %s' %int(ind+1))
    current.pack(side=TOP, fill=BOTH, expand=1)

def next():
    # if 1st page (general) then
    # move forward and unless cancelled, append anything added in current
    # page to [todisc_cmds], removing todisc_cmds[current] first
    global todisc_cmds
    mv_amt = +1
    if pages.index(current) == 0:
        pass
    elif pages.index(current) == 1:
        # if todisc_commands.bash exists in current dir, prompt for rename
        if os.path.exists(script_file):
            rename_msg = 'The option file we will use:\n' + \
            'todisc_commands.bash\n' + \
            'exists in the current directory.\n' + \
            'It will be renamed to:\n' + \
            '%s' + \
            '\nProceed ?'
            rename_msg = rename_msg % (os.path.basename(newname))
            if askokcancel(message=rename_msg):
                os.rename(script_file, newname)
            else:
                showerror(message='Cancelled')
                return

        # disable previous button at this point
        button2.pack_forget()
        # withdraw the wizard and run the GUI, collecting commands
        #tk.withdraw()
        get_commands = run_gui()
        # append to list and go to next page unless GUI was cancelled out of
        if len(get_commands) == 1 and 'Cancelled' in get_commands:
            mv_amt = 0
        else:
            if len(todisc_cmds) > 0:
                todisc_cmds.pop(0)
            #cmds = [l + ' \\' for l in get_commands if l]
            # get header: shebang, PATH, and 'todisc'
            global header
            header = []
            try:
                while not get_commands[0].startswith('-'):
                    header.append(get_commands[0] + '\n')
                    get_commands.pop(0)
            except IndexError:
                pass
            header[-1] = 'todisc \\\n'
            cmds = [l for l in get_commands if l]
            gen_cmd.append(cmds)
            todisc_cmds.append(cmds)
        tk.deiconify()
    elif pages.index(current) == 2:
        run_cmds = list(pg3_listbox1.get(0, END))
        run_cmds = [l for l in run_cmds if l]
        # withdraw the wizard and run the GUI, collecting commands
        run_cmds.insert(0,  '-titles')
        get_commands = run_gui(run_cmds)
        # append to list and go to next page unless GUI was cancelled out of
        if len(get_commands) == 1 and 'Cancelled' in get_commands:
            return
        else:
            if len(todisc_cmds) > 1:
                todisc_cmds.pop(1)
                # get rid of shebang and PATH statements
            try:
                while not get_commands[0].startswith('-'):
                    get_commands.pop(0)
            except IndexError:
                pass
            cmds = ['-vmgm']
            cmds.extend(get_commands)
            cmds.append('-end-vmgm')
            vmgm_cmd.append(cmds)
            todisc_cmds.append(cmds)
        tk.deiconify()

        ####################  prepare the next pages listbox ##################
        options_list = save_list()
        # delete titleset listbox contents else it increases with page movement
        pg4_listbox1.delete(0, END)
        numtitles = len(options_list)
        if (numtitles > 10): numtitles = 10
        pg4_listbox1.configure(height=numtitles)
        # insert or reinsert options list into titleset listbox
        pg4_listbox1.insert(END, 'General options')
        pg4_listbox1.insert(END, 'Root menu')
        for i in xrange(numtitles):
            pg4_listbox1.insert(END, options_list[i])
    elif pages.index(current) == 3:
        tk.withdraw()
        options_list = save_list()
        numtitles = len(save_list())
        for i in range(numtitles):
            run_cmds = ['-menu-title']
            run_cmds.append(options_list[i])
            # withdraw the wizard and run the GUI, collecting commands
            if i < numtitles:
                msg = 'Now we will work on titleset %s' % int(i+1)
                root = Tk()
                root.withdraw()
                if showinfo(message=msg):
                    root.destroy()
            get_commands = run_gui(run_cmds)
            try:
                while not get_commands[0].startswith('-'):
                    get_commands.pop(0)
            except IndexError:
                pass
            cmds = ['-titleset']
            cmds.extend(get_commands)
            cmds.append('-end-titleset')
            tsets_cmds.append(cmds)
            todisc_cmds.append(cmds)
        tk.deiconify()
        cmdout = open(script_file, 'w')
        # add the shebang, PATH, and 'todisc \' lines
        cmdout.writelines(header)
        # flatten the list
        all_lines = [line for sublist in todisc_cmds for line in sublist]
        #
        # write every line with a '\' at the end, except the last
        for line in all_lines[:-1]:
            cmdout.write(line + ' \\\n')
        # write the last line
        cmdout.write(all_lines[-1])
        cmdout.close()
        run_in_xterm(script_file)
        # allow editing the saved lists with the GUI
        # not sure yet if we want to 'move' here
    move(mv_amt)

def prev():
    move(-1)

def get_list(event):
    """
    function to read the listbox selection
    and put the result in an entry widget
    """
    try:
        # get selected line index
        index = pg3_listbox1.curselection()[0]
        # get the line's text
        seltext = pg3_listbox1.get(index)
        # delete previous text in enter1
        enter1.delete(0, END)
        # now display the selected text
        enter1.insert(0, seltext)
    except IndexError:
        pass

def set_list(event):
    """
    insert an edited line from the entry widget
    back into the listbox
    """
    try:
        index = pg3_listbox1.curselection()[0]
        # delete old listbox line
        pg3_listbox1.delete(index)
    except IndexError:
        index = END
    # insert edited item back into pg3_listbox1 at index
    pg3_listbox1.insert(index, enter1.get())
    enter1.delete(0, END)
    # add a new index if we are at end of list
    if pg3_listbox1.get(END):
        pg3_listbox1.insert(END, enter1.get())
    pg3_listbox1.selection_set(END)

def callback(options):
    pass
    #TODO FIXME
    #cmd = ['tovid', 'gui'] + options
    #command = Popen(cmd, stdout=PIPE)


def save_list():
    """
    save the current listbox contents
    """
    # get a list of listbox lines
    temp_list = list(pg3_listbox1.get(0, END))
    return [ l for l in temp_list if l]

def run_gui(args=[]):
    cmd = ['tovid', 'gui'] + args
    todiscgui_cmd = Popen(cmd, stdout=PIPE)
    # sleep to avoid the 'void' of time before the GUI loads
    sleep(0.5)
    if tk.state() is not 'withdrawn':
        tk.withdraw()
    status = todiscgui_cmd.wait()
    if status == 0:
        todisc_cmds = read_script()
    else:
        todisc_cmds = []
    return todisc_cmds

def read_script():
    title = 'load saved script'
    script = 'todisc_commands.bash'

    # if script doesn't exist prompt for load.
    if os.path.exists(script_file):
        script = script_file
    else:
        while not os.path.exists(script):
            script = askopenfilename(title=title, initialfile=script)
            if not script:
                showinfo(message='Cancelled.\nReturning to previous page')
                return ['Cancelled']
    fin = open(script)
    fcont = fin.readlines()
    fin.close()
    filecontents =  [line.rstrip(' \\\n') for line in fcont]
    # -from-gui not needed
    if '-from-gui' in filecontents:
        filecontents.remove('-from-gui')
    if not 'todisc \\\n' in fcont:
        showerror(message=error_msg)
        return ['Cancelled']
    else:
        # delete the temporary saved script file
        os.remove(script)
        return filecontents


def run_in_xterm(script):
    cmd = ['xterm', '-fn', '10x20', '-sb', '-title', 'todisc', '-e', 'sh', '-c']
    wait_cmd = ';echo ;echo "Press Enter to exit terminal"; read input'
    tovid_cmd = 'bash %s' % script
    cmd.append(tovid_cmd + wait_cmd)
    tk.withdraw()
    command = Popen(cmd, stderr=PIPE)
    tk.deiconify()

###################### get/set some external variables #######################

# get tovid prefix
path_cmd = ['tovid', '--prefix']
tovid_prefix = Popen(path_cmd, stdout=PIPE)
tovid_prefix = tovid_prefix.communicate()[0].strip()

# get metagui font configuration
inifile = os.path.expanduser('~/.metagui/config')
style = Style()
style.load(inifile)
caption_font = list(style.font)
caption_font[2] = 'bold'
heading_font = []
lrg_font = []
bold_font = []
heading_font.extend(caption_font)
lrg_font.extend(caption_font)
bold_font.extend(caption_font)
heading_font[1] = 20
lrg_font[1] = 16
bold_font[2] = 'bold'

# the script we will be using for options
cur_dir = os.path.abspath('')
script_file = cur_dir + '/todisc_commands.bash'


##############################################################################
##################### GUI initialization and execution #######################
##############################################################################

tk = Tk()
tkframe = Frame(tk)
tkframe.pack(side=LEFT, fill=Y, anchor='w')
tk.title('Tovid titleset wizard')
tk.minsize(width=800, height=660)
button_frame = Frame(tk)
button_frame.pack(expand=1, fill=X, side=BOTTOM, anchor='s')
button2 = Button(button_frame, text='<<<  Previous', command=prev)
button2.pack(side=LEFT, fill=Y, expand=1, anchor='w')
button1 = Button(button_frame, text='Next page >>>', command=next)
button1.pack(side=RIGHT, fill=Y, expand=1, anchor='e')

############################ Page 1 of wizard ############################
pg1_txt1 = '''
iNTRODUCTION

Welcome to the tovid titleset wizard.  We will be making a complete DVD, with
multiple levels of menus including a root menu (VMGM menu) and titleset menus.
We will be using the 'tovid gui', which uses the 'todisc' script.

Any of these menus can be either static or animated, and use thumbnail menu
links or plain text links.  In addition the titleset menus can have chapter
selection menus ("submenus") which by default have only thumbnail menu links.

A great many options of these menus are configurable, including fonts, shapes
and effects for thumbnails, fade-in/fade-out effects, "switched menus", the
addition of a "showcased" image/video, animated or static background image or
video, audio background ... etc.  There are also playback options including the
supplying of chapter points, special navigation features like "quicknav",
and configurable DVD button links.
'''
#   The GUI will then be called repeated for each titleset you wish to make.
#
#    Each time you will need to press the "Save script" button and save to the same
#    file.  When you have no more titlesets, press the "Done" button and you will
#    be prompted to run your final project.
#
#    Press "Next" to begin...

page1 = Frame(tk)
frame1 = Frame(tkframe)
img_file = tovid_prefix + '/tovid.gif'
if os.path.isfile(img_file):
    img = PhotoImage(file=img_file)
    pg1_label1 = Label(frame1, text='Tovid', font=heading_font)
    pg1_label1.pack(side=TOP, pady=40)
else:
    print img_file, ' does not exist'
pg1_label2 = Label(frame1, image=img).pack(side=TOP)
pg1_label3 = Label(frame1, text='Titleset Wizard', font=lrg_font)
pg1_label3.pack(side=TOP, pady=40)
pg1_label4 = Label(frame1, text='Page 1', font=lrg_font)
pg1_label4.pack(side=BOTTOM, anchor='s')
frame1.pack(side=LEFT, padx=30, anchor='nw', fill=Y, expand=1)
page1.pack(fill=BOTH, expand=1)
pg1_label5 = Label(page1, text=pg1_txt1, justify=LEFT, font=style.font)
pg1_label5.pack(fill=BOTH, expand=1, side=TOP, anchor='w')
############################## Page 2 of wizard ##############################
pg2_txt1 = '''
LET'S BEGIN

When you press the "Next" button at the bottom of the wizard, we will start the
GUI and begin with general options applying to all titlesets.  The only REQUIRED
option here is specifying an Output directory at the bottom of the GUI's main tab.
'''
pg2_txt2 = '''
After making your selections, it is important that you save the file to
%s

Press 'Next' to begin ...
''' %script_file

page2 = Frame(tk)
pg2_label1 = Label(page2, text=pg2_txt1, justify=LEFT, font=style.font)
pg2_label1.pack(fill=BOTH, expand=1, side=TOP, anchor='w')
pg2_label2 = Label(page2, text=pg2_txt2, justify=LEFT, font=caption_font)
pg2_label2.pack(fill=BOTH, expand=1, side=TOP, anchor='w')

############################## Page 3 of wizard ##############################
pg3_txt1 = \
'''Now we will save options for your root (VMGM) menu.  The only option you
really need is the titleset titles.  Since you can not save titles in the GUI
without loading videos you need to enter them here.  These titleset names will
appear as menu titles for the respective menu in your DVD.

Enter the names of your titlesets, one per line, pressing <ENTER> each time.
Do not use quotes unless you want them to appear literally in the title.

Press "Next" when you are finished.

'''

page3 = Frame(tk)
pg3_label1 = Label(page3, text=pg3_txt1, justify=LEFT, font=style.font)
pg3_label1.pack(fill=BOTH, expand=1)
# create the listbox (note that size is in characters)
pg3_frame1 = LabelFrame(page3, text="Root 'menu link' titles")
pg3_frame1.pack(fill=Y, expand=1)
pg3_listbox1 = Listbox(pg3_frame1, width=50, height=12)
#listbox1.insert(0, '')
pg3_listbox1.pack(side=LEFT, fill=Y, expand=1)

# create a vertical scrollbar to the right of the listbox
yscroll = Scrollbar(pg3_frame1, command=pg3_listbox1.yview, orient=VERTICAL)
yscroll.pack(side=LEFT, fill=Y)
pg3_listbox1.configure(yscrollcommand=yscroll.set)

# use entry widget to display/edit selection
enter1 = Entry(page3, width=50, text='Enter titles here')
enter1.pack(fill=Y, expand=1)
# set focus on entry
enter1.select_range(0, 'end')
enter1.focus_set()
# pressing the return key will update edited line
enter1.bind('<Return>', set_list)

# button to save the listbox's data lines to a file
#button2 = Button(page3, text='Done', command=save_list)
#button2.pack(fill=X, expand=1, side=LEFT, anchor='sw')


pg3_listbox1.bind('<ButtonRelease-1>', get_list)

############################ Page 4 of wizard ############################

page4 = Frame(tk)
pg4_txt1 = '''
'''
pg4_label1 = Label(page4, text=pg4_txt1, justify=LEFT, font=style.font)
pg4_label1.pack(fill=BOTH, expand=1)
# create the listbox (note that size is in characters)
pg4_frame1 = LabelFrame(page4, \
  text="Choose an item to edit with the GUI")
pg4_frame1.pack(fill=X, expand=1)

pg4_listbox1 = Listbox(pg4_frame1, width=60)

#listbox1.insert(0, '')
pg4_listbox1.pack(side=LEFT, fill=X, expand=1)
pg4_listbox1.bind("<<ListboxSelect>>", callback)#TODO FIXME
# create a vertical scrollbar to the right of the listbox
yscroll2 = Scrollbar(pg4_frame1, command=pg4_listbox1.yview, orient=VERTICAL)
yscroll2.pack(side=LEFT, fill=Y)
pg4_listbox1.configure(yscrollcommand=yscroll.set)

#    run the gui and collect the options

############################ Page 5 of wizard ############################

page5 = Frame(tk)
pg5_frame1 = Frame(page5)
pg5_frame1.pack(fill=BOTH, expand=1)
page5_label1 = Label(pg5_frame1, text='Finished!', font=heading_font)
page5_label1.pack()

#page6 = Frame(tk)
#pg6_frame1 = Frame(page6)
#pg6_frame1.pack(fill=BOTH, expand=1)
#pg6_label1 = Label(pg6_frame1, text='This is page 6')
#pg6_label1.pack()

######################### Run the darn thing already #########################

pages = [page1, page2, page3, page4, page5]
current = page1
mainloop()
