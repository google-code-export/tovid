#! /usr/bin/env python
# tktodisc

"""A Tkinter graphical user interface for todisc.

Each Frame class has a grouping of todisc options in tkinter widget form.
Frame subclasses define a getOptions method that appends command-line
options to a Command, raising exceptions if required options are missing.
"""

"""
todisc options

Style control

-showcase FileEntry('Showcase:', 'load', 'Select an image or video file')
-textmenu
-background FileEntry('Background:', 'load', 'Select an image or video file')
-menu-font FontSelector
-menu-fontsize
-menu-fade
-thumb-shape
-3dthumbs
-thumb-font FontSelector
-thumb-fontsize
-submenu-stroke-color ColorPicker
-submenu-title-color
-button-style rect|text|text-rect
-rotate
-wave
-showcase-framestyle none|glass
-title-color
-stroke-color
-highlightcolor
-selectcolor
-text-mist
-text-mist-color
-text-mist-opacity
-opacity
-blur
-thumb-mist-color
-thumb-text-color
-showcase-titles-align
-tile3x1

Audio:

-bgaudio FileEntry('Audio:', 'load', 'Select an audio file')
-menu-audiolength
-menu-audio-fade
-submenu-audio FileEntry
-submenu-audiolength
-submenu-audio-fade


Other

-files
-titles
-submenus YesNo
-ani-submenus YesNo
-static YesNo
-submneu-titles
-chapters
-menu-title
-menu-length
-intro FileEntry
-seek
-showcase-seek
-loop
-playall YesNo
-chain-videos
-subtitles lang1 lang2 ...
-audio-lang chan1 chan2 ...
-aspect Choice
-widescreen Choice

Execution control

-debug
-noask
-tovidopts

"""

import os
import time
from libtovid.cli import Command

try:
    from Tkinter import *
    from tkFileDialog import *
    from tkMessageBox import *
    from tkColorChooser import askcolor
except:
    import traceback
    traceback.print_exc()
    print "Could not import Tkinter. You may need to do the following:"
    print "  Debian: Install 'python-tk'"
    print "  Gentoo: Add 'tk' to python USE flags"
    print "  Fedora: Install 'tkinter'"
    sys.exit()


### --------------------------------------------------------------------
### Exceptions
### --------------------------------------------------------------------

class MissingOption (Exception):
    """Raised when a required command-line option was not specified.

        message: Brief description of the missing option
        widget: A tkinter Widget where the option can be set
    """
    def __init__(self, message, widget=None):
        self.message = message
        self.widget = widget


### --------------------------------------------------------------------
### Helper functions
### --------------------------------------------------------------------

def pretty_todisc(command):
    """Return a prettified version of a given todisc Command."""
    assert isinstance(command, Command)
    result = ['%s' % command.args[0]]
    opts = command.args[1:]
    while opts:
        arg = str(opts.pop(0))
        if arg.startswith('-'):
            result.append(arg)
        else:
            result[-1] += ' ' + arg
    return '\n'.join(result)

def blink(widget):
    """Cause a widget to "blink" by briefly changing its background color.
    """
    if widget == None:
        return
    assert isinstance(widget, Widget)
    widget.config(background='#C0C0F0')
    widget.update()
    time.sleep(1)
    widget.config(background='white')


### --------------------------------------------------------------------
### Custom widgets
### --------------------------------------------------------------------

class Metawidget (Frame):
    """A base class for extended special-purpose widgets.

    A Metawidget may contain any number of other widgets, and store a
    single variable value. Presumably, a subclass will link self.variable
    to one or more control widgets, via their textvariable attribute.
    
    See the Metawidget subclasses below for examples of how self.variable,
    get() and set() are used.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        # TODO: Support different variable types
        self.variable = StringVar()

    def get(self):
        """Return the value of the Metawidget's variable."""
        return self.variable.get()

    def set(self, value):
        """Set the Metawidget's variable to the given value."""
        self.variable.set(value)

### --------------------------------------------------------------------

class Choice (Metawidget):
    """A set of radiobuttons for choosing one of several options.
    """
    def __init__(self, master=None, label="Choices:", choices=['A', 'B']):
        """Initialize Choice widget with the given label and list of choices.
        """
        Metawidget.__init__(self, master)
        self.label = Label(self, text=label)
        self.label.pack(side=LEFT)
        # Radiobutton widgets, indexed by choice value
        self.rb = {}
        for choice in choices:
            self.rb[choice] =\
                Radiobutton(self, text=choice, value=choice,
                            variable=self.variable, command=self.change)
            self.rb[choice].pack(side=LEFT)
        # First choice by default
        self.set(choices[0])

    def change(self):
        """Event handler called when the radiobutton is changed.
        Print the new value chosen."""
        print "%s chosen" % self.get()

### --------------------------------------------------------------------

class LabelEntry (Metawidget):
    """A labeled entry box"""
    def __init__(self, master=None, label="Text:", variable=None):
        Metawidget.__init__(self, master)
        self.pack()
        self.label = Label(self, text=label)
        self.entry = Entry(self, width=30, textvariable=self.variable)
        self.label.pack(side=LEFT)
        self.entry.pack(side=LEFT)

### --------------------------------------------------------------------

class BrowseButton (Metawidget):
    """A "Browse" button that opens a file browser for loading/saving a file.
    """
    def __init__(self, master=None, type='load', title="Select a file"):
        """Create a file-browser button.
        
            master:       Widget to use as master
            type:         What kind of file dialog to use ('load' or 'save')
            title:        Text to display in the titlebar of the file dialog
        """
        Metawidget.__init__(self, master)
        self.button = Button(self, text="Browse...", command=self.onClick)
        self.button.grid()
        self.type = type
        self.title = title

    def onClick(self, event=None):
        """Event handler when button is pressed"""
        if self.type == 'load':
            filename = askopenfilename(parent=self, title=self.title)
        elif self.type == 'save':
            filename = asksaveasfilename(parent=self, title=self.title)
        else:
            raise ValueError, "BrowseButton type must be 'load' or 'save'"
        # Got a filename? Save it
        if filename and self.variable:
            self.set(filename)

### --------------------------------------------------------------------

class FileEntry (Metawidget):
    """A filename selector frame, consisting of label, entry, and browse button.
    """
    def __init__(self, master=None, label='Filename:', type='load',
                 desc='Select a file to load'):
        """Create a FileEntry with label, text entry, and browse button.
        
            label: Text of label next to file entry box
            type:  Do you intend to 'load' or 'save' this file?
            desc:  Brief description (shown in title bar of file
                   browser dialog)
        """
        Metawidget.__init__(self, master)
        self.label = Label(self, text=label)
        self.entry = Entry(self, width=40, textvariable=self.variable)
        self.button = BrowseButton(self, type, desc)
        # Link our variable with button's
        self.button.variable = self.variable
        # Draw
        self.label.grid(row=0, column=0, sticky=E)
        self.entry.grid(row=0, column=1, sticky=EW)
        self.button.grid(row=0, column=2, sticky=E)

### --------------------------------------------------------------------

class ColorPicker (Metawidget):
    def __init__(self, master=None, label="Color:"):
        Metawidget.__init__(self, master)
        self.variable = Variable()
        self.label = Label(self, text=label)
        self.button = Button(self, text="None", command=self.change)
        self.label.pack(side=LEFT)
        self.button.pack(side=LEFT)

    def change(self):
        rgb, color = askcolor(self.get())
        if color:
            self.set(color)
            self.button.config(text=color, foreground=color)


### --------------------------------------------------------------------
### Frames containing related control widgets
### --------------------------------------------------------------------

class FormatFrame (Frame):
    """A frame with a choice of formats (DVD, SVCD)
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.format = Choice(self, "Disc format:", ['DVD', 'SVCD'])
        self.format.pack()
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        format = str(self.format.get()).lower()
        command.add('-%s' % format)

### --------------------------------------------------------------------

class TvsysFrame (Frame):
    """A frame with a choice of TV system (PAL, NTSC)
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.tvsys = Choice(self, "TV system:", ['NTSC', 'PAL'])
        self.tvsys.pack()

    def setOptions(self, command):
        tvsys = str(self.tvsys.get()).lower()
        command.add('-%s' % tvsys)
    
### --------------------------------------------------------------------

class FileListFrame (Frame):
    """A frame containing a list of filenames, and controls to add or delete
    files from the list.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.curtitle = StringVar()  # Text of the currently selected title
        self.varFiles = Variable()   # List of current files
        self.varTitles = Variable()  # List of current titles
        self.varUsage = StringVar()  # String describing current space usage
        self.curindex = 0
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Scrollbar to control both listboxes
        self.scrollbar = Scrollbar(self, orient=VERTICAL)
        self.scrollbar.grid(row=1, column=3, sticky=N+S)
        self.scrollbar.config(command=self.scroll)
        # File list box and add/remove buttons
        self.lblFiles = Label(self, text="Files")
        self.lblFiles.grid(row=0, column=0, columnspan=2, sticky=W)
        self.lstFiles = Listbox(self, width=30,
                                listvariable=self.varFiles,
                                yscrollcommand=self.scrollbar.set)
        self.lstFiles.bind('<Button-1>', self.selectListitem)
        self.lstFiles.bind('<B1-Motion>', self.dragListitem)
        self.lstFiles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstFiles.grid(row=1, column=0, columnspan=2)
        self.btnAdd = Button(self, text="Add...", command=self.addFiles)
        self.btnAdd.grid(row=2, column=0, sticky=E+W)
        self.btnRemove = Button(self, text="Remove",
                                   command=self.removeFiles)
        self.btnRemove.grid(row=2, column=1, sticky=E+W)
        # Title list box and editing field
        self.lblTitles = Label(self, text="Titles")
        self.lblTitles.grid(row=0, column=2, sticky=W)
        self.lstTitles = Listbox(self, width=30,
                                 listvariable=self.varTitles,
                                 yscrollcommand=self.scrollbar.set)
        self.lstTitles.bind('<Button-1>', self.selectListitem)
        self.lstTitles.bind('<B1-Motion>', self.dragListitem)
        self.lstTitles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstTitles.grid(row=1, column=2)
        self.entTitle = Entry(self, width=30,
                              textvariable=self.curtitle)
        self.entTitle.bind('<Return>', self.setTitle)
        self.entTitle.grid(row=2, column=2)
        # Disc usage total
        self.lblUsage = Label(self, textvariable=self.varUsage)
        self.lblUsage.grid(row=3, column=0, columnspan=2, sticky=W)
        self.updateUsage()

    def scroll(self, *args):
        """Event handler when scrollbar is moved."""
        apply(self.lstFiles.yview, args)
        apply(self.lstTitles.yview, args)
        
    def selectListitem(self, event):
        """Event handler when a filename or title in the list is selected.
        Set the title box for editing and change the mouse cursor."""
        self.curindex = self.lstFiles.nearest(event.y)
        self.curtitle.set(self.lstTitles.get(self.curindex))
        self.config(cursor="double_arrow")
    
    def onDrop(self, event):
        """Event handler called when an item is "dropped" (mouse-release).
        Change the mouse cursor back to the default arrow.
        """
        self.config(cursor="")
    
    def dragListitem(self, event):
        """Event handler to move a file/title to another position in the list"""
        loc = self.lstFiles.nearest(event.y)
        if loc != self.curindex:
            file = self.lstFiles.get(self.curindex)
            title = self.lstTitles.get(self.curindex)
            self.lstFiles.delete(self.curindex)
            self.lstTitles.delete(self.curindex)
            self.lstFiles.insert(loc, file)
            self.lstTitles.insert(loc, title)
            self.curindex = loc

    def setTitle(self, event):
        """Event handler when Enter is pressed after editing a title."""
        newtitle = self.curtitle.get()
        print "Setting title to '%s'" % newtitle
        self.lstTitles.delete(self.curindex)
        self.lstTitles.insert(self.curindex, newtitle)
        
    def addFiles(self):
        """Event handler for adding files to the list box"""
        files = askopenfilenames(parent=self, title='Add files')
        for file in files:
            print "Adding '%s' to the file list" % file
            self.lstFiles.insert(END, file)
            # Add a dummy title (with pathname and extension removed)
            title = os.path.basename(file)[0:-4]
            self.lstTitles.insert(END, title)
        self.updateUsage()

    def getUsage(self):
        """Return the total size, in bytes, consumed by the current list
        of files."""
        total = 0
        for file in self.varFiles.get():
            total += os.path.getsize(file)
        return total
    
    def updateUsage(self):
        """Update the disc space usage label."""
        usage = self.getUsage() / (1024 * 1024)
        self.varUsage.set("%s MB used" % usage)

    def removeFiles(self):
        """Event handler for removing files from the list box"""
        selection = self.lstFiles.curselection() \
                  or self.lstTitles.curselection()
        # Using reverse order prevents reflow from messing up indexing
        for line in reversed(selection):
            print "Removing '%s' from the file list" % self.lstFiles.get(line)
            self.lstFiles.delete(line)
            self.lstTitles.delete(line)
        self.updateUsage()
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        files = self.varFiles.get()
        titles = self.varTitles.get()
        if len(files) != len(titles):
            # Should never happen, if the listboxes are properly in sync
            raise Exception, "Number of files and titles do not match"
        if len(files) == 0:
            raise MissingOption("File list (-files)", self.lstFiles)
        if len(titles) == 0:
            raise MissingOption("Title list (-titles)", self.lstTitles)
        command.add('-files')
        for file in files:
            command.add(file)
        command.add('-titles')
        for title in titles:
            command.add(title)

### --------------------------------------------------------------------

class BackgroundsFrame (Frame):
    """Widgets for setting background image or video and audio"""
    def __init__(self, master=None):
        Frame.__init__(self, master, borderwidth=1, relief=SUNKEN)
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        label = Label(self, text="Menu backgrounds")
        label.grid(row=0, sticky=W)
        self.visual = FileEntry(self, "Image or video:", 'load',
                                "Select an image or video file")
        self.audio = FileEntry(self, "Audio:", 'load',
                               "Select an audio file")
        self.visual.grid(sticky=E)
        self.audio.grid(sticky=E)
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        visual = self.visual.get()
        audio = self.audio.get()
        if visual:
            command.add('-background', pic)
        if audio:
            command.add('-bgaudio', audio)

### --------------------------------------------------------------------

class OutfileFrame (Frame):
    """A frame containing an output-file text entry/browser box."""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.outfile = FileEntry(self, "Output file:", 'save',
                                 "Select an output name.")
        self.outfile.pack(side=LEFT)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        outfile = self.outfile.get()
        if not outfile:
            print "WARNING: No output file selected"
            raise MissingOption("Output filename (-out)", self.outfile.entry)
        command.add('-out', outfile)

### --------------------------------------------------------------------

class TitleFrame (Frame):
    """A frame containing options for customizing titles"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
        
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.title = LabelEntry(self, "Menu title:")
        self.title.pack(side=LEFT)
        self.title.set("My video collection")

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        title = self.title.get()
        if title:
            command.add('-menu-title', title)
        else:
            command.add('-menu-title', ' ')

### --------------------------------------------------------------------

class MiscOptionsFrame (Frame):
    """A frame containing miscellaneous options"""
    # TODO: Categorize these as needed and separate into new Frame subclasses
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.varStatic = BooleanVar()    # Static menus
        self.varSubmenus = BooleanVar()  # Create submenus
        self.varCustom = StringVar()     # Custom todisc options
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.chkStatic = Checkbutton(self,
                                     text="Static menus (takes less time)",
                                     variable=self.varStatic)
        self.chkStatic.grid(columnspan=2, sticky=W)
        self.chkSubmenus = Checkbutton(self,
                                       text="Create submenus (takes more time)",
                                       variable=self.varSubmenus)
        self.chkSubmenus.grid(columnspan=2, sticky=W)
        self.lblCustom = Label(self, text="Custom todisc options:")
        self.lblCustom.grid(row=2, column=0)
        self.entCustom = Entry(self, width=40,
                               textvariable=self.varCustom)
        self.entCustom.grid(row=2, column=1)
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        if self.varStatic.get():
            command.add('-static')
        if self.varSubmenus.get():
            command.add('-submenus')
        # Hack alert: Splitting on ' ' may not work in some cases
        if self.varCustom.get():
            custom = self.varCustom.get().split(' ')
            for opt in custom:
                command.add(opt)

### --------------------------------------------------------------------

class AdvancedFrame (Frame):
    """A frame containing controls for setting advanced options.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
        
    def drawWidgets(self):
        self.lblAdvanced = Label(self, text="Advanced options")
        self.lblAdvanced.grid()
        self.subAudio = FileEntry(self, "Submenu audio:", 'load',
                                  "Select an audio file.")
        self.showcase = FileEntry(self, "Showcase:", 'load',
                                  "Select an image or video file.")
        self.menuFont = LabelEntry(self, "Menu font:")
        self.thumbFont = LabelEntry(self, "Thumb font:")
        self.subAudio.grid()
        self.showcase.grid()
        self.menuFont.grid()
        self.thumbFont.grid()
        self.titlecolor = ColorPicker(self, "Title color:")
        self.titlecolor.grid()

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        subaudio = self.subAudio.get()
        showcase = self.showcase.get()
        menufont = self.menuFont.get()
        thumbfont = self.thumbFont.get()
        if subaudio:
            command.add('-submenu-audio', subaudio)
        if showcase:
            command.add('-showcase', showcase)
        if menufont:
            command.add('-menu-font', menufont)
        if thumbfont:
            command.add('-thumb-font', thumbfont)


### --------------------------------------------------------------------
### Main application window
### --------------------------------------------------------------------

class Application(Frame):
    def __init__(self, master=None, theme='default'):
        Frame.__init__(self, master)
        self.advanced_visible = False
        self.grid()
        self.setTheme(theme)
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.fraTitle = TitleFrame(self)
        self.fraTitle.grid(sticky=W)
        
        self.fraFileList = FileListFrame(self)
        self.fraFileList.grid(sticky=W)

        self.fraFormat = FormatFrame(self)
        self.fraFormat.grid(sticky=W)

        self.fraTvsys = TvsysFrame(self)
        self.fraTvsys.grid(sticky=W)

        self.fraBackgrounds = BackgroundsFrame(self)
        self.fraBackgrounds.grid(sticky=EW)
        
        self.fraMisc = MiscOptionsFrame(self)
        self.fraMisc.grid(sticky=W)

        self.fraOutfile = OutfileFrame(self)
        self.fraOutfile.grid(sticky=W)

        # Create AdvancedFrame, but don't grid it
        self.fraAdvanced = AdvancedFrame(self)
    
        # Bottom row of buttons
        fraButtons = Frame(self)
        self.btnQuit = Button(fraButtons, text="Quit", command=self.quit)
        self.btnQuit.pack(side=LEFT)
        self.btnRun = Button(fraButtons, text="Run todisc command",
                             command=self.runCommand)
        self.btnRun.pack(side=LEFT)
        self.btnAdvanced = Button(fraButtons, text="Advanced >>",
                                  command=self.showAdvanced)
        self.btnAdvanced.pack(side=LEFT)
        fraButtons.grid()

    def getCommand(self):
        """Return the complete todisc command."""
        cmd = Command('todisc')
        frames = [
            self.fraTitle,
            self.fraFileList,
            self.fraFormat,
            self.fraTvsys,
            self.fraBackgrounds,
            self.fraMisc,
            self.fraOutfile,
            self.fraAdvanced]
        for frame in frames:
            try:
                frame.setOptions(cmd)
            except MissingOption, err:
                print "Missing a required option: %s" % err.message
                raise
        return cmd

    def showAdvanced(self):
        """Show/hide the "advanced options" frame in a popup window."""
        if self.advanced_visible:
            self.btnAdvanced.config(text="Advanced >>")
            self.advanced_visible = False
            self.fraAdvanced.grid_forget()
            self.update()
        else:
            self.btnAdvanced.config(text="Advanced <<")
            self.advanced_visible = True
            self.fraAdvanced.grid(row=0, column=2, rowspan=8, sticky=NW)
            self.btnAdvanced.update()

    def runCommand(self):
        """Run the todisc command."""
        try:
            cmd = self.getCommand()
        except MissingOption, err:
            showerror("Missing option",
                      "Missing a required option: %s" % err.message)
            blink(err.widget)
            return
        # Show pretty-printed command
        pretty_cmd = pretty_todisc(cmd)
        print "Running command:"
        print pretty_cmd
        # Verify with user
        if askyesno(message="Run todisc now?"):
            root.withdraw()
            try:
                cmd.run()
            except KeyboardInterrupt:
                showerror(message="todisc was interrupted!")
            else:
                showinfo(message="todisc finished running!")
            root.deiconify()

    def setTheme(self, theme='default'):
        """Set widget styles to match a theme. This must be called before
        widgets are created, and does not apply to widgets already created.
        """
        if theme == 'light':
            print "Using 'light' theme"
            #self.option_add("*Frame*background", '#808080')
            self.option_add("*Entry.relief", GROOVE)
            self.option_add("*Listbox.relief", GROOVE)
            self.option_add("*Button.relief", GROOVE)
            self.option_add("*Frame*font",
                            ("Helvetica", 12))
        else:  # theme == 'default' or anything else
            print "Using default theme"
            self.option_add("*Entry.relief", SUNKEN)
            self.option_add("*Listbox.relief", SUNKEN)
            self.option_add("*Button.relief", RAISED)
            self.option_add("*Frame*font",
                            ("Helvetica", 10, "bold"))
        # These apply to all themes
        self.option_add("*Entry.background", 'white')
        self.option_add("*Listbox.background", 'white')

### --------------------------------------------------------------------
### Entry point
### --------------------------------------------------------------------

root = Tk()
if __name__ == '__main__':
    # Single argument: theme name 'default' or 'light'
    theme = 'default'
    if len(sys.argv) > 1:
        theme = sys.argv[1]

    root.title("tktodisc: A todisc GUI")
    app = Application(root, theme)
    root.mainloop()

