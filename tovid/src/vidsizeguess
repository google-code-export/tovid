#! /usr/bin/env python
# vidsizeguess

"""Predict the approximate encoded output size of a video stream.

Inputs:
    Multimedia video file (.avi, .mov, .mpg or whatever)

Desired outputs:
    Video stream size estimate for each format, ex.:
        VCD: 15MB
        SVCD: 25MB
        DVD: 50MB
        Half-DVD: 35MB
        ...
    Or, a single size estimate for a specific format, e.g.:
        $ vidsizeguess -dvd -ntsc Video.avi
        50263741

Current implementation works by reading your ~/.tovid/stats.tovid file,
containing statistics on all videos you've encoded with tovid. Output size
prediction is then based on the average for each format.
"""

import csv
import os, sys

class VidStat:
    """Statistics on a single encoded video file from stats.tovid."""
    def __init__(self):
        self.length = 0
        self.format = ''
        self.tvsys = ''
        self.tgt_bitrate = 0
        self.avg_bitrate = 0
    def display(self):
        print "%s secs, %s %s, %s kbps" % \
              (self.length, self.format, self.tvsys, self.avg_bitrate)
    def values_ok(self):
        """Return True if all values are filled, False if any are empty."""
        if self.length and self.format and self.tvsys and \
           self.tgt_bitrate and self.avg_bitrate:
            return True
        else:
            return False

def get_stats():
    """Get a list of VidStats from ~/.tovid/stats.tovid."""
    statfile = open(os.path.expanduser('~/.tovid/stats.tovid'), 'r')
    csv_reader = csv.reader(statfile, skipinitialspace=True)
    statlist = []
    skipped = 0
    for line in csv_reader:
        # Only use real stat lines, not comments/empties
        if len(line) >= 14 and line[0] != "TOVID_VERSION":
            stat = VidStat()
            stat.length = line[2]
            stat.format = line[3].lower()
            stat.tvsys = line[4].lower()
            stat.tgt_bitrate = int(line[6] or 0)
            stat.avg_bitrate = int(line[7] or 0)
            if stat.values_ok():
                statlist.append(stat)
            else:
                skipped += 1
    statfile.close()
    print "Read %s lines from ~/.tovid/stats.tovid" % len(statlist)
    print "Skipped %s lines because they contained empty fields." % skipped
    return statlist

if __name__ == '__main__':
    stats = get_stats()
    stat_dict = {}
    for stat in stats:
        if stat_dict.has_key(stat.format):
            stat_dict[stat.format].append(stat.avg_bitrate)
        else:
            stat_dict[stat.format] = []
    print "Average bitrates:"
    for format, bitrates in stat_dict.iteritems():
        samples = len(bitrates)
        if samples > 0:
            print "%s: %s (%s samples)" % \
                  (format, sum(bitrates) / samples, samples)

