SVN crash course


%!include(xhtml): ''navmenu.html''

//This document was last edited on %%mtime(%A, %d %B %Y).//


==Developer access==

If wapcaplet has made you a tovid developer, you'll need to know a bit
more about ``svn`` commands. The first is that you'll need to use a slightly
different method to checkout:

```
$ export SVN_SSH="ssh -l username"
$ svn checkout svn+ssh://svn.berlios.de/tovid/trunk/tovid
```

Where ``username`` is your BerliOS username. This does proper, authenticated
checkout, so that you can make changes to the repository itself (editing files,
adding new ones, etc.)

A few other useful ``svn`` commands are:

: svn status -u
    Compare your local (or 'working') copy to the svn repository

: svn update
    Get and merge updates from the repository (as other developers make them)

: svn commit -m "Fixed bugs"
    Upload/merge your changes into the repository, with a brief summary

: svn add FILE
    Add FILE to the repository (will be added on your next commit)

: svn move FILE_A FILE_B
    Use this when you need to move or rename a file in the repository


See the
[SVN HowTo https://developer.berlios.de/docman/display_doc.php?docid=394&group_id=2]
and [Version Control with Subversion http://svnbook.red-bean.com/] to learn more about using SVN.


==Automated secure login==

When communicating with the svn server, your shell will prompt you for your BerliOS password each time. You can automate password giving with **ssh-agent**. Genereate a public key and place it on the BerliOS servers:

```
$ ssh-keygen -t rsa
$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@shell.berlios.de
```

Then, before you startx or after you open a new terminal, start the ssh-agent and add your public keys to the session:

```
$ ssh-agent
$ ssh-add
```


==Errors==


===Need to update===

```
$ svn commit -m "Various updates"
Sending        tovid/docs/man/idvid.1
Sending        tovid/docs/man/makedvd.1
Sending        tovid/docs/man/makemenu.1
Transmitting file data .................svn: Commit failed (details follow):
svn: Out of date: '/trunk/tovid/docs/man/idvid.1' in transaction '190-1'
```

(Need to ``svn update`` to fix?)


===Failed to add===

```
$ svn update
svn: Failed to add file 'setuplib': object of the same name already exists
```

[Explanation http://tortoisesvn.sourceforge.net/node/8]. Quick solution: rename
or remove the offending file (``rm setuplib``) and re-run ``svn update``.


===Conflicts===

Say you're running a routine update, and you get this error (yes, it
really is an error!):

```
$ svn update
C    install.t2t
U    dvrequant.t2t
U    makemenu.t2t
Updated to revision 189.
```

See the ``C`` next to ``install.t2t``? That means there was an edit
conflict; you edited the file, but at the same time someone else committed
changes to the repository.

You'll also notice some temporary files that appear, with names like
``install.t2t.r189`` and ``install.t2t.mine``. You can manually shuffle these
files around to resolve the conflict if you really know what you're doing, but
the easiest fix is to edit //the original// ``install.t2t`` file, and look for
lines with markers like this:

```
<<<<<<< .mine
Foo
=======
Bar
>>>>>>> .r189
```

Delete lines such that only ``Foo`` or ``Bar`` remains; the angle-brackets
and equals-signs lines should be deleted. Save the file, then run:

```
$ svn resolved install.t2t
Resolved conflicted state of 'install.t2t'
```

