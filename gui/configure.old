#!/bin/bash

# configure
# Configuration and installation script for
# the tovid GUI, version 0.18
# ==============
# Project homepage: http://tovid.sourceforge.net/
#
# This software is licensed under the GNU General Public License
# For the full text of the GNU GPL, see:
#
#   http://www.gnu.org/copyleft/gpl.html
#
# No guarantees of any kind are associated with use of this software.

WELCOME=`cat << 'EOF'
-----------------------------
tovid GUI configurator and installer
Version 0.18
Written in 2004-2005 by Eric Pierce
http://tovid.sourceforge.net/
-----------------------------

You are running the configuration and installation script for
the tovid GUI. This script will check your computer for
necessary and optional components, and can install the GUI into
a system-wide directory of your choosing. This script may also
be used to remove the tovid GUI, if you decide you do not
want it to be installed any longer.
EOF`

GOODBYE=`cat << 'EOF'
Please check out the tovid documentation on the web:
  http://tovid.sourceforge.net/
Questions? Comments? Visit the tovid discussion forum:
  http://www.createphpbb.com/phpbb/?mforum=tovid
EOF`

# Default location for components to be installed to
DEFAULT_INST_PATH="/usr/local/bin"

# List of components to install or remove
BIN_FILES="tovidgui.py"
SHARE_FILES="icons/*"

# Check for required programs and utilities
# Make sure the tovid scripts are present
if [[ `type -p tovid` && `type -p makemenu` && `type -p makexml` ]]; then
    TOVID_CUR_VERSION=$( tovid -version )
else
    TOVID_CUR_VERSION=""
fi

# See what UNIX flavor is in use
UNIX_FLAVOR=$( uname -s )

SEPARATOR="=========================================="

# *********************************
# EXECUTION BEGINS HERE
# *********************************

echo $"$WELCOME"
echo $SEPARATOR
echo "Do you want to [I]nstall, [R]emove, or [C]heck only (I, R, or C)?"
read INST_ACTION

if [[ $INST_ACTION == "I" ]] || [[ $INST_ACTION == "i" ]]; then
  echo $SEPARATOR
  echo "Installing the tovid GUI"
  echo $SEPARATOR
  echo "Where would you like to install the GUI?"
  echo "(Just press enter to use the default: $DEFAULT_INST_PATH)"
  read INST_PATH
  # Use default path if none specified
  [[ -z $INST_PATH ]] && INST_PATH=$DEFAULT_INST_PATH
  echo $SEPARATOR
  # The rest of the installation proceeds below
elif [[ $INST_ACTION == "R" ]] || [[ $INST_ACTION == "r" ]]; then
  echo $SEPARATOR
  echo "Removing the tovid GUI"
  echo $SEPARATOR
  # HACK: Shouldn't need to ask user where tovid is installed.
  # A better way would be to store this bit of into in a
  # ~/.tovid/profile for retrieval at this point.
  echo "Where is the tovid GUI installed (default: $DEFAULT_INST_PATH)?"
  read INST_PATH
  # Use default path if none specified
  [[ -z $INST_PATH ]] && INST_PATH=$DEFAULT_INST_PATH
  ERROR=$( cd "$INST_PATH" && rm -f $BIN_FILES )
  if [ ! $ERROR ]; then
    echo "The following files were removed from $INST_PATH:"
    echo "  $BIN_FILES"
    echo "Thanks for trying tovid!"
    exit 0
  else
    echo "The following files could not be successfully removed from $INST_PATH:"
    echo "  $BIN_FILES"
    echo "Perhaps you specified the wrong path name. If you forgot where you"
    echo "installed tovid, you can locate it by running the following command:"
    echo "  find . -name tovid"
    echo "If you are unable to get this script to uninstall tovid, you can manually"
    echo "remove the files listed above from wherever they are installed."
    exit 1
  fi
else
  echo "Checking configuration only. Nothing will be installed or removed."
  echo $SEPARATOR
  CHECK_ONLY="y"
fi

# Remainder of installation and configuration-checking begins here

# Check for supported UNIX flavors
echo "UNIX flavor: $UNIX_FLAVOR"
if [[ $UNIX_FLAVOR != "Linux" ]]; then
    echo $SEPARATOR
    echo "It looks like you're using a non-Linux system (though I may"
    echo "be wrong; I'm just a dumb installer). BSD and Cygwin are"
    echo "partially supported, but tovid is primarily tested on Linux."
    echo "The developer(s) of tovid would be very happy to learn that"
    echo "tovid works on other non-Linux platforms, so please give it"
    echo "a try and report any problems you have."
    echo $SEPARATOR
fi

# Check for required versions among dependencies, where applicable

echo "Checking for required and recommended programs..."
echo $SEPARATOR

# Make sure mplayer at least supports yuv4mpeg output
if [[ -z $TOVID_CUR_VERSION ]]; then
  echo $SEPARATOR
  echo "The tovid suite of scripts does not appear to be installed"
  echo "in your path. Please install the tovid suite before installing"
  echo "the GUI. You can download it from http://sf.net/projects/tovid"
  echo $SEPARATOR
  UNMET_REQS="y"
else
  echo "Found tovid suite version $TOVID_CUR_VERSION installed. Good!"
fi

# If we're checking only, just print a message and exit
if [[ $CHECK_ONLY == "y" ]]; then
  echo $SEPARATOR
  if [[ $UNMET_REQS == "y" ]]; then
    echo "Some required or recommended software was not found. You should"
    echo "install them before using tovid for full functionality."
  else
    echo "You have all the required and recommended"
    echo "software for using the tovid GUI!"
  fi
  echo $"$GOODBYE"
  echo $SEPARATOR
  exit 0
fi

PROCEED="y"
# If there were unmet requirements, prompt for continuation
echo $SEPARATOR
if [[ $UNMET_REQS == "y" ]]; then
  echo "Some required software was not found. Installation will not continue."
  echo $"$GOODBYE"
  echo $SEPARATOR
  exit 1
else
    # If destination is not writable, prompt for root password
    if [[ ! -w $INST_PATH ]]; then
        echo "Installing to $INST_PATH requires root permission. At the"
        echo "prompt, please enter the root password."
        ERROR=$( su -c "cp $BIN_FILES $INST_PATH" )
    # Otherwise, just copy
    else
        ERROR=$( cp $BIN_FILES "$INST_PATH" )
    fi
  echo $SEPARATOR
  if [ ! $ERROR ]; then
    echo "The following files were successfully installed to $INST_PATH:"
    echo "  $BIN_FILES"
  else
    echo "Installation to $INST_PATH failed for some reason. Please"
    echo "ensure that $INST_PATH exists and is writable. Sorry for the"
    echo "inconvenience!"
  fi
fi

echo $SEPARATOR
echo $"$GOODBYE"
echo $SEPARATOR

exit 0
