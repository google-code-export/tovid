# tovid SCons build/install file

"""What it needs to do:

Targets:
  build ('scons' with no arguments)
  install
  uninstall (equivalent to '-c install')
  dist

To build:
* Build tovid-init from tovid-init.in
* Build manpages from doc/src/LANG sources

To install:
* Install tovid suite bash scripts from src/
* Install libtovid Python modules from libtovid/
* Install manpages built from doc/src/LANG sources

To distribute:
* Build
* Create tovid-VERSION.tar.gz

"""

import glob
import sys
from os import sep   # OS-dependent pathname separator

# Get SCons environment
env = Environment()

# Ensure that Python 2.4 is available
# (needed by cli.py for the 'subprocess' module)
env.EnsurePythonVersion(2, 4)

# -----------------------------------------------------------------------
# Installation directories
# -----------------------------------------------------------------------

# These are kind of a hack until we can figure a platform-independent
# approach to determining correct install locations
prefix = sep.join([sys.prefix, 'local'])        # /usr/local
script_dest = sep.join([prefix, 'bin'])         # /usr/local/bin
man_dest = sep.join([prefix, 'man', 'man1'])    # /usr/local/man/man1
python_dest = sep.join([prefix, 'lib', 'python2.4', 'site-packages'])

# -----------------------------------------------------------------------
# Source files to build/install
# -----------------------------------------------------------------------

# Bash scripts in src/ to be installed to script_dest
bash_scripts = [\
    'idvid'
    'makedvd',
    'makemenu',
    'makeslides',
    'makevcd',
    'makexml',
    'postproc',
    'todisc',
    'todisc-fade-routine',
    'todiscgui',
    'tovid',
    'tovid-batch',
    'tovid-init',
    'tovid-interactive',
    'tovid-stats',
    'tovid-test',
    'tovidgui']


# Python modules in libtovid/ to be installed to python_dest
# If possible, install these in a Pythonic (like distutils) way; all the
# modules to be installed are recursively defined in the __all__ list in
# libtovid/__init__.py.
libtovid_modules = [\
    '__init__.py',
    'cli.py',
    'config.py',
    'media.py',
    'opts.py',
    'standards.py',
    'stats.py',
    
    'layout/disc.py',
    'layout/dvdauthor.py',
    'layout/menu.py',
    'layout/tdl.py',
    'layout/video.py',
    
    #'render/__init__.py',
    'render/animation.py',
    'render/drawing.py',
    'render/effect.py',
    'render/flipbook.py',
    'render/layer.py',
    'render/mvg.py',
    
    #'transcode/__init__.py',
    'transcode/encoders.py',
    'transcode/subtitles.py']

# -----------------------------------------------------------------------
# Building manpages
# -----------------------------------------------------------------------

man_src_en = glob.glob(sep.join(['docs', 'src', 'en', '*.t2t']))
man_src_es = glob.glob(sep.join(['docs', 'src', 'es', '*.t2t']))
man_src = man_src_en #+ doc_src_es

# Manual page build rule, using txt2tags
ManBuilder = Builder(action = [['txt2tags', '-t', 'man', 
            '--infile=$SOURCE', 
            '--outfile=$TARGET']],
         suffix = "1")

env.Append(BUILDERS = {'Man': ManBuilder})

# Build each manpage
for manpage in man_src:
    env.Man(manpage)

# -----------------------------------------------------------------------
# Installing bash scripts
# -----------------------------------------------------------------------

env.Install(dir = script_dest,
            source = ['src' + sep + file for file in bash_scripts])
src_dir = ['src' + sep + file for file in bash_scripts]

env.Install(dir = python_dest + sep + 'libtovid',
            source = ['libtovid' + sep + file for file in libtovid_modules])

env.Alias('install', [python_dest])

