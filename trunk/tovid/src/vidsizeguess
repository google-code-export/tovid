#! /usr/bin/env python
# vidsizeguess

"""Predict the approximate encoded output size of a video stream.

Inputs:
    Multimedia video file (.avi, .mov, .mpg or whatever)

Desired outputs:
    Video stream size estimate for each format, ex.:
        VCD: 15MB
        SVCD: 25MB
        DVD: 50MB
        Half-DVD: 35MB
        ...
    Or, a single size estimate for a specific format, e.g.:
        $ vidsizeguess -dvd -ntsc Video.avi
        50263741

Current implementation works by reading your ~/.tovid/stats.tovid file,
containing statistics on all videos you've encoded with tovid. Output size
prediction is then based on the average for each format.
"""

import csv
import os, sys

# Order of fields in stats.tovid
fields = [\
    'tovid_version',
    'final_name',
    'cur_length',
    'res',
    'tvsys',
    'final_size',
    'tgt_bitrate',
    'avg_bitrate',
    'peak_bitrate',
    'gop_minsize',
    'gop_maxsize',
    'script_tot_time',
    'cpu_model',
    'cpu_speed'
    ]

class VidStat:
    """Statistics on a single encoded video file."""
    def __init__(self):
        self.length = 0
        self.format = ''
        self.tvsys = ''
        self.bitrate = 0
        self.cpu_speed = ''
    def display(self):
        print "%s secs, %s %s, %s kbps" % \
              (self.length, self.format, self.tvsys, self.bitrate)
    def values_ok(self):
        """Return True if all values are filled, False if any are empty."""
        if self.length and self.format and self.tvsys and self.bitrate:
            return True
        else:
            return False

class Statlist:
    """A list of VidStats that may be queried with a simple database-like
    interface."""
    def __init__(self):
        stats = []

    def read_csv(self, filename):
        """Import stats from a CSV (comma-delimited quoted text) file."""
        self.stats = []
        statfile = open(filename, 'r')
        csv_reader = csv.reader(statfile, skipinitialspace=True)
        skipped = 0
        for line in csv_reader:
            # Only use real stat lines, not comments/empties
            if len(line) >= 14 and line[0] != "TOVID_VERSION":
                stat = VidStat()
                stat.length = int(line[fields.index('cur_length')] or 0)
                stat.format = line[fields.index('res')].lower()
                stat.tvsys = line[fields.index('tvsys')].lower()
                stat.bitrate = int(line[fields.index('avg_bitrate')] or 0)
                stat.encoding_time = float(line[fields.index('script_tot_time')]) \
                        / float(stat.length)
                stat.cpu_speed = line[fields.index('cpu_speed')]
                if stat.values_ok():
                    self.stats.append(stat)
                else:
                    skipped += 1
        statfile.close()
        print "Read %s lines from %s" % (len(self.stats), filename)
        print "Skipped %s lines because they contained empty fields." % skipped

    def average(self, attribute):
        """Calculate the average value for a given numeric VidStat attribute.
        For example, average('bitrate') returns the average overall bitrate of
        all videos in the list."""
        values = []
        for stat in self.stats:
            values.append(getattr(stat, attribute))
        if len(values) > 0:
            return float(sum(values) / len(values))
        else:
            return 0

    def average_by(self, attribute, by_attribute):
        """Return a dictionary of averages of an attribute, indexed by another
        attribute. For example, average_by('bitrate', 'format') returns average
        bitrates for each format."""
        values = {}
        for stat in self.stats:
            byval = getattr(stat, by_attribute)
            if not values.has_key(byval):
                values[byval] = []
            values[byval].append(getattr(stat, attribute))
        # Calculate averages
        averages = {}
        if len(values) > 0:
            for key, samples in values.iteritems():
                averages[key] = float(sum(samples) / len(samples))
        return averages


if __name__ == '__main__':
    statlist = Statlist()
    statlist.read_csv(os.path.expanduser('~/.tovid/stats.tovid'))

    print "Average bitrate"
    print statlist.average('bitrate')
    print "Average bitrates by format"
    print statlist.average_by('bitrate', 'format')
    print "Average bitrates by TV system"
    print statlist.average_by('bitrate', 'tvsys')
    print "Average encoding time factors by CPU speed"
    print statlist.average_by('encoding_time', 'cpu_speed')
