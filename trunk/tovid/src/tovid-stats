#! /usr/bin/env python
# tovid-stats

"""Predict the approximate encoded output size of a video stream.

Inputs:
    Multimedia video file (.avi, .mov, .mpg or whatever)

Desired outputs:
    Video stream size estimate for each format, ex.:
        VCD: 15MB
        SVCD: 25MB
        DVD: 50MB
        Half-DVD: 35MB
        ...
    Or, a single size estimate for a specific format, e.g.:
        $ vidsizeguess -dvd -ntsc Video.avi
        50263741

Current implementation works by reading your ~/.tovid/stats.tovid file,
containing statistics on all videos you've encoded with tovid. Output size
prediction is then based on the average for each format.
"""

import os
import sys
from libtovid.stats import Statlist, fields
from libtovid.utils import pretty_dict

if __name__ == '__main__':
    args = sys.argv[1:]
    if len(args) == 0:
        print "This script gathers statistics from your ~/.tovid/stats.tovid"
        print "file, and can display summary information or average values."
        print " "
        print "Usage:"
        print "    tovid-stats COMMANDS"
        print "COMMANDS may be any of:"
        print "    -count FIELD"
        print "        Count total for each distinct value of FIELD"
        print "    -average FIELD_1 [by FIELD_2]"
        print "        Average FIELD_1, optionally sorted by FIELD_2"
        print "FIELD may be any of the following:"
        for field in fields:
            print "    %s" % field
        print "You may include multiple commands, for example:"
        print "    tovid-stats -count cpu_speed -average avg_bitrate by tvsys"
        sys.exit(0)

    # Open and read tovid stat file
    statfile = os.path.expanduser('~/.tovid/stats.tovid')
    tempfile = os.path.expanduser('~/.tovid/stats.tovid.csv')
    # Only use lines beginning with "
    os.system('cat "%s" | grep \'^\"\' > "%s"' % (statfile, tempfile))
    statlist = Statlist()
    statlist.read_csv(tempfile)
    os.remove(tempfile)

    # Parse command-line
    while args:
        arg = args.pop(0)
        if arg == '-count':
            field = args.pop(0)
            print "Total occurrences of each distinct %s:" % field
            print pretty_dict(statlist.count_unique(field))
        elif arg == '-average':
            avg_field = args.pop(0)
            if args and args[0] == 'by':
                args.pop(0)
                by_field = args.pop(0)
                print "Average %s, sorted by %s:" % \
                        (avg_field, by_field)
                print pretty_dict(statlist.average_by(avg_field, by_field))
            else:
                print "Average %s:" % avg_field
                print statlist.average(avg_field)


