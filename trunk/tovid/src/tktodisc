#! /usr/bin/env python
# tktodisc

"""A Tkinter graphical user interface for todisc.

Each Frame class has a grouping of todisc options in tkinter widget form.
Frame subclasses define a getOptions method that appends command-line
options to a Command, raising exceptions if required options are missing.
"""

import os
import time
import re
from libtovid.cli import Command
from libtovid.gui.meta import *

try:
    from Tkinter import *
    from tkFileDialog import *
    from tkMessageBox import *
except:
    import traceback
    traceback.print_exc()
    print "Could not import Tkinter. You may need to do the following:"
    print "  Debian: Install 'python-tk'"
    print "  Gentoo: Add 'tk' to python USE flags"
    print "  Fedora: Install 'tkinter'"
    sys.exit()


WIDGETS = {
    'showcase':
        (FileEntry, 'Showcase', 'load', 'Select an image or video file.'),
    'background':
        (FileEntry, 'Background', 'load', 'Select an image or video file'),
    'menu-font':
        (FontPicker,),
    'menu-fade':
        (Flag, 'Fade in menu', False),
    'thumb-shape':
        (Choice, 'Thumb shape', 'normal|oval|plectrum|egg'),
    'thumb-font':
        (FontPicker,),
    'submenu-stroke-color':
        (ColorPicker, 'Submenu stroke color'),
    'submenu-title-color':
        (ColorPicker, 'Submenu title color'),
    'button-style':
        (Choice, 'Button style', 'rect|text|text-rect'),
    'rotate':
        (Number, 'Rotate'),
    'showcase-framestyle':
        (Choice, 'Showcase frame style', 'none|glass'),
    'title-color':
        (ColorPicker, 'Title color'),
    'stroke-color':
        (ColorPicker, 'Stroke color'),
    'highlightcolor':
        (ColorPicker, 'Highlight color'),
    'selectcolor':
        (ColorPicker, 'Selection color'),
    'text-mist':
        (Flag, 'Text mist', False),
    'text-mist-color':
        (ColorPicker, 'Text mist color'),
    'text-mist-opacity':
        (Number, 'Text mist opacity', 1, 100, 'scale'),
    'opacity':
        (Number, 'Thumbnail opacity', 1, 100, 'spin', 100),
    'blur':
        (Number, 'Blur', 1, 5, 'scale', 4),
    'thumb-mist-color':
        (ColorPicker, 'Thumb mist color'),
    'thumb-text-color':
        (ColorPicker, 'Thumb text color'),
    'showcase-titles-align':
        (Choice, 'Showcase title alignment', 'west|east|center'),
    'bgaudio':
        (FileEntry, 'Audio', 'load', 'Select an audio file'),
    'menu-audio-length':
        (Number, 'Menu audio length', 0, 120, 'scale'),
    'menu-audio-fade':
        (Number, 'Menu audio fade', 0, 10, 'scale'),
    'submenu-audio':
        (FileEntry, 'Submenu audio', 'load', 'Select an audio file'),
    'submenu-audio-length':
        (Number, 'Submenu audio length', 0, 120, 'scale'),
    'submenu-audio-fade':
        (Number, 'Submenu audio fade', 0, 10, 'scale'),
    'submenus':
        (Flag, 'Create submenus'),
    'ani-submenus':
        (Flag, 'Animated submenus (takes more time)'),
    'static':
        (Flag, 'Static menus (takes less time)'),
    'menu-title':
        (LabelEntry, 'Menu title'),
    'menu-length':
        (Number, 'Menu length', 0, 120, 'scale'),
    'intro':
        (FileEntry, 'Intro video', 'load', 'Select a video file'),
    'seek':
        (Number, 'Seek time', 0, 600, 'spin', 2),
    'showcase-seek':
        (Number, 'Showcase seek time', 0, 600, 'scale', 2),
    'loop':
        (Number, 'Loop', 0, 10, 'scale'),
    'playall':
        (Flag, '"Play all" button', False),
    'aspect':
        (Optional, Choice, 'Aspect ratio', '4:3|16:9'),
    'widescreen':
        (Optional, Choice, 'Widescreen', 'nopanscan|noletterbox'),
    'tovidopts':
        (LabelEntry, 'Custom tovid options')
    }

"""
Not yet fitted into above dictionary:

textmenu
menu-fontsize
thumb-fontsize
3dthumbs
wave
tile3x1
files
titles
submneu-titles
chapters
chain-videos
subtitles lang1 lang2 ...
audio-lang chan1 chan2 ...


Special cases:

Optional: Some choices (i.e. widescreen nopanscan|noletterbox) may be omitted,
    equivalent to having nothing chosen (no radiobutton). For these, disable
    or hide the widgets, and ensure that they don't output any command-line
    options.
    
    (Optional, Choice, 'Widescreen', 'nopanscan|noletterbox')
    
Flag (True/False): Include option, or don't include option

Lists: -files/-titles may need rethinking!


"""

### --------------------------------------------------------------------
### Exceptions
### --------------------------------------------------------------------

class MissingOption (Exception):
    """Raised when a required command-line option was not specified.

        message: Brief description of the missing option
        widget: A tkinter Widget where the option can be set
    """
    def __init__(self, message, widget=None):
        self.message = message
        self.widget = widget


### --------------------------------------------------------------------
### Helper functions
### --------------------------------------------------------------------

def getWidget(master, option):
    """Create a widget with the given master, appropriate for the given option.
    Return the new widget.
    """
    if option not in WIDGETS:
        raise NotImplementedError("No widget found for option: %s" % option)
    widget = WIDGETS[option][0]
    args = WIDGETS[option][1:]
    return widget(master, *args)

def pretty_todisc(command):
    """Return a prettified version of a given todisc Command."""
    assert isinstance(command, Command)
    result = ['%s' % command.args[0]]
    opts = command.args[1:]
    while opts:
        arg = str(opts.pop(0))
        if arg.startswith('-') and not re.match('^[-+]?[0-9]+$', arg):
            result.append(arg)
        else:
            result[-1] += ' ' + arg
    return '\n'.join(result)

def blink(widget):
    """Cause a widget to "blink" by briefly changing its background color.
    """
    if widget == None:
        return
    assert isinstance(widget, Widget)
    widget.config(background='#C0C0F0')
    widget.update()
    time.sleep(1)
    widget.config(background='white')


### --------------------------------------------------------------------
### Frames containing related control widgets
### --------------------------------------------------------------------
# add Menu template choices frame
class menuChoiceFrame (Frame):
    """A frame for setting which Menu template will be used"""
    def __init__(self, master=None):
        Frame.__init__(self, master, borderwidth=3, relief=GROOVE)
        self.varMenuStyle = StringVar()     # Menu arrangement variable
        self.varShowcaseFile = StringVar()     # use showcase file
        self.varTextSplit = IntVar()
        self.drawWidgets()
    def drawWidgets(self):
        self.lblMenuTemplate = Label(self, text="Menu Arrangement")
        self.lblMenuTemplate.grid(row=1, column=0, sticky=W)
        self.chkDefault = Radiobutton(self,
                                     text="Default style",
                                     variable=self.varMenuStyle, value="doDefault")
        self.chkDefault.grid(row=2, column=0, sticky=W)
        self.chkDefault.select()
        self.chkShowcase = Radiobutton(self,
                                     text="Showcase style",
                                     variable=self.varMenuStyle, value="doShowcase")
        self.chkShowcase.grid(row=3, column=0, sticky=W)
        self.chkTextmenu = Radiobutton(self,
                                     text="Textmenu style",
                                     variable=self.varMenuStyle, value="doTextmenu")
        self.chkTextmenu.grid(row=4, column=0, sticky=W)
        self.showcasefile = FileEntry(self, "Showcase file", 'load',
                                "Select an image or video file.")
        self.showcasefile.grid(row=5, column=0, sticky=E)
        self.lblTextmenuSplit = Label(self, text="Start new textmenu column at video #   ( default is 15 )")
        self.lblTextmenuSplit.grid(row=6, column=0, sticky=E+W)
        self.textSplit = Spinbox(self, from_=2, to=15, width=3, textvariable=self.varTextSplit, wrap=1)
        self.varTextSplit.set(15)
        self.textSplit.grid(row=6, column=0, padx=5, sticky=W)
# TODO {  if textmenu is not checked, remove these 2 options
#      {  self.lblTextmenuSplit.grid_remove() and self.textSplit.grid_remove()
#      {  if default is not selected, remove both of the above and the showcase file selector
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        showcasefile = self.showcasefile.get()
        textsplit = self.varTextSplit.get()
        if textsplit == 15:
            textsplit=""
        if self.varMenuStyle.get() == "doShowcase" or showcasefile:
            command.add('-showcase', showcasefile)
        if self.varMenuStyle.get() == "doTextmenu":
            command.add('-textmenu', textsplit)



class FormatFrame (Frame):
    """A frame with a choice of formats (DVD, SVCD)
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.format = Choice(self, "Disc format", ['DVD', 'SVCD'])
        self.format.pack()
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        format = str(self.format.get()).lower()
        command.add('-%s' % format)

### --------------------------------------------------------------------

class TvsysFrame (Frame):
    """A frame with a choice of TV system (PAL, NTSC)
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.tvsys = Choice(self, "TV system", ['NTSC', 'PAL'])
        self.tvsys.pack()

    def setOptions(self, command):
        tvsys = str(self.tvsys.get()).lower()
        command.add('-%s' % tvsys)
    
### --------------------------------------------------------------------

class FileListFrame (Frame):
    """A frame containing a list of filenames, and controls to add or delete
    files from the list.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.curtitle = StringVar()  # Text of the currently selected title
        self.varFiles = Variable()   # List of current files
        self.varTitles = Variable()  # List of current titles
        self.varUsage = StringVar()  # String describing current space usage
        self.curindex = 0
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Scrollbar to control both listboxes
        self.scrollbar = Scrollbar(self, orient=VERTICAL)
        self.scrollbar.grid(row=1, column=3, sticky=N+S)
        self.scrollbar.config(command=self.scroll)
        # File list box and add/remove buttons
        self.lblFiles = Label(self, text="Files")
        self.lblFiles.grid(row=0, column=0, columnspan=2, sticky=W)
        self.lstFiles = Listbox(self, width=30,
                                listvariable=self.varFiles,
                                yscrollcommand=self.scrollbar.set)
        self.lstFiles.bind('<Button-1>', self.selectListitem)
        self.lstFiles.bind('<B1-Motion>', self.dragListitem)
        self.lstFiles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstFiles.grid(row=1, column=0, columnspan=2)
        self.btnAdd = Button(self, text="Add...", command=self.addFiles)
        self.btnAdd.grid(row=2, column=0, sticky=E+W)
        self.btnRemove = Button(self, text="Remove",
                                   command=self.removeFiles)
        self.btnRemove.grid(row=2, column=1, sticky=E+W)
        # Title list box and editing field
        self.lblTitles = Label(self, text="Titles")
        self.lblTitles.grid(row=0, column=2, sticky=W)
        self.lstTitles = Listbox(self, width=30,
                                 listvariable=self.varTitles,
                                 yscrollcommand=self.scrollbar.set)
        self.lstTitles.bind('<Button-1>', self.selectListitem)
        self.lstTitles.bind('<B1-Motion>', self.dragListitem)
        self.lstTitles.bind('<ButtonRelease-1>', self.onDrop)
        self.lstTitles.grid(row=1, column=2)
        self.entTitle = Entry(self, width=30,
                              textvariable=self.curtitle)
        self.entTitle.bind('<Return>', self.setTitle)
        self.entTitle.grid(row=2, column=2)
        # Disc usage total
        self.lblUsage = Label(self, textvariable=self.varUsage)
        self.lblUsage.grid(row=3, column=0, columnspan=2, sticky=W)
        self.updateUsage()

    def scroll(self, *args):
        """Event handler when scrollbar is moved."""
        apply(self.lstFiles.yview, args)
        apply(self.lstTitles.yview, args)
        
    def selectListitem(self, event):
        """Event handler when a filename or title in the list is selected.
        Set the title box for editing and change the mouse cursor."""
        self.curindex = self.lstFiles.nearest(event.y)
        self.curtitle.set(self.lstTitles.get(self.curindex))
        self.config(cursor="double_arrow")
    
    def onDrop(self, event):
        """Event handler called when an item is "dropped" (mouse-release).
        Change the mouse cursor back to the default arrow.
        """
        self.config(cursor="")
    
    def dragListitem(self, event):
        """Event handler to move a file/title to another position in the list"""
        loc = self.lstFiles.nearest(event.y)
        if loc != self.curindex:
            file = self.lstFiles.get(self.curindex)
            title = self.lstTitles.get(self.curindex)
            self.lstFiles.delete(self.curindex)
            self.lstTitles.delete(self.curindex)
            self.lstFiles.insert(loc, file)
            self.lstTitles.insert(loc, title)
            self.curindex = loc

    def setTitle(self, event):
        """Event handler when Enter is pressed after editing a title."""
        newtitle = self.curtitle.get()
        print "Setting title to '%s'" % newtitle
        self.lstTitles.delete(self.curindex)
        self.lstTitles.insert(self.curindex, newtitle)
        
    def addFiles(self):
        """Event handler for adding files to the list box"""
        files = askopenfilenames(parent=self, title='Add files')
        for file in files:
            print "Adding '%s' to the file list" % file
            self.lstFiles.insert(END, file)
            # Add a dummy title (with pathname and extension removed)
            title = os.path.basename(file)[0:-4]
            self.lstTitles.insert(END, title)
        self.updateUsage()

    def getUsage(self):
        """Return the total size, in bytes, consumed by the current list
        of files."""
        total = 0
        for file in self.varFiles.get():
            total += os.path.getsize(file)
        return total
    
    def updateUsage(self):
        """Update the disc space usage label."""
        usage = self.getUsage() / (1024 * 1024)
        self.varUsage.set("%s MB used" % usage)

    def removeFiles(self):
        """Event handler for removing files from the list box"""
        selection = self.lstFiles.curselection() \
                  or self.lstTitles.curselection()
        # Using reverse order prevents reflow from messing up indexing
        for line in reversed(selection):
            print "Removing '%s' from the file list" % self.lstFiles.get(line)
            self.lstFiles.delete(line)
            self.lstTitles.delete(line)
        self.updateUsage()
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        files = self.varFiles.get()
        titles = self.varTitles.get()
        if len(files) != len(titles):
            # Should never happen, if the listboxes are properly in sync
            raise Exception, "Number of files and titles do not match"
        if len(files) == 0:
            raise MissingOption("File list (-files)", self.lstFiles)
        if len(titles) == 0:
            raise MissingOption("Title list (-titles)", self.lstTitles)
        command.add('-files')
        for file in files:
            command.add(file)
        command.add('-titles')
        for title in titles:
            command.add(title)

### --------------------------------------------------------------------

class BackgroundsFrame (Frame):
    """Widgets for setting background image or video and audio"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        label = Label(self, text="Menu backgrounds")
        label.grid(row=0, sticky=W)
        self.visual = FileEntry(self, "Image or video", 'load',
                                "Select an image or video file")
        self.audio = FileEntry(self, "Audio", 'load',
                               "Select an audio file")
        self.visual.grid(sticky=E)
        self.audio.grid(sticky=E)
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        visual = self.visual.get()
        audio = self.audio.get()
        if visual:
            command.add('-background', visual)
        if audio:
            command.add('-bgaudio', audio)

### --------------------------------------------------------------------

class OutfileFrame (Frame):
    """A frame containing an output-file text entry/browser box."""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.outfile = FileEntry(self, "Output file", 'save',
                                 "Select an output name.")
        self.outfile.pack(side=LEFT)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        outfile = self.outfile.get()
        if not outfile:
            print "WARNING: No output file selected"
            raise MissingOption("Output filename (-out)", self.outfile.entry)
        command.add('-out', outfile)

### --------------------------------------------------------------------

class TitleFrame (Frame):
    """A frame containing options for customizing titles"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
        
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.title = LabelEntry(self, "Menu title")
        self.title.pack(side=LEFT)
        self.title.set("My video collection")

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        title = self.title.get()
        if title:
            command.add('-menu-title', title)
        else:
            command.add('-menu-title', ' ')

### --------------------------------------------------------------------

class MiscOptionsFrame (Frame):
    """A frame containing miscellaneous options"""
    # TODO: Categorize these as needed and separate into new Frame subclasses
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.static = Flag(self, "Static menus (takes less time)", False)
        self.submenus = Flag(self, "Create submenus (takes more time)", False)
        self.custom = LabelEntry(self, "Custom todisc options")
        self.static.grid(columnspan=2, sticky=W)
        self.submenus.grid(columnspan=2, sticky=W)
        self.custom.grid(row=2, column=0)
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        if self.static.get():
            command.add('-static')
        if self.submenus.get():
            command.add('-submenus')
        # Hack alert: Splitting on ' ' may not work in some cases
        if self.custom.get():
            options = self.custom.get().split(' ')
            for opt in options:
                command.add(opt)

### --------------------------------------------------------------------

class AdvancedFrame (Frame):
    """A frame containing controls for setting advanced options.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master, borderwidth=3, relief=GROOVE)
        self.label = Label(self, text="Advanced options")
        self.label.grid()
        options = [
            'submenu-audio',
            'menu-font',
            'thumb-font',
            'title-color',
            'opacity',
            'blur',
            'seek',
            'loop',
            'playall',
            'aspect',
            'widescreen']
        self.widgets = {}
        for option in options:
            self.widgets[option] = getWidget(self, option)
            self.widgets[option].grid(sticky=W)
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        for option, widget in self.widgets.items():
            value = widget.get()
            if value == True:
                command.add('-%s' % option)
            elif value:
                command.add('-%s' % option, value)

### --------------------------------------------------------------------
### Main application window
### --------------------------------------------------------------------

class Application(Frame):
    def __init__(self, master=None, theme='default'):
        Frame.__init__(self, master)
        self.advanced_visible = False
        self.grid()
        self.setTheme(theme)
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.fraTitle = TitleFrame(self)
        self.fraTitle.grid(sticky=W)
        
        self.fraFileList = FileListFrame(self)
        self.fraFileList.grid(sticky=W)

        self.fraFormat = FormatFrame(self)
        self.fraFormat.grid(sticky=W)

        self.fraTvsys = TvsysFrame(self)
        self.fraTvsys.grid(sticky=W)

        self.fraMenuFormat = menuChoiceFrame(self)
        self.fraMenuFormat.grid(padx=5, pady=5, sticky=W)

        self.fraBackgrounds = BackgroundsFrame(self)
        self.fraBackgrounds.grid(sticky=EW)
        
        self.fraMisc = MiscOptionsFrame(self)
        self.fraMisc.grid(sticky=W)

        self.fraOutfile = OutfileFrame(self)
        self.fraOutfile.grid(sticky=W)

        # Create AdvancedFrame, but don't grid it
        self.fraAdvanced = AdvancedFrame(self)
    
        # Bottom row of buttons
        fraButtons = Frame(self)
        self.btnQuit = Button(fraButtons, text="Quit", command=self.quit)
        self.btnQuit.pack(side=LEFT)
        self.btnRun = Button(fraButtons, text="Run todisc command",
                             command=self.runCommand)
        self.btnRun.pack(side=LEFT)
        self.btnAdvanced = Button(fraButtons, text="Advanced >>",
                                  command=self.showAdvanced)
        self.btnAdvanced.pack(side=LEFT)
        fraButtons.grid()

    def getCommand(self):
        """Return the complete todisc command."""
        cmd = Command('todisc')
        frames = [
            self.fraTitle,
            self.fraFileList,
            self.fraFormat,
            self.fraTvsys,
            self.fraMenuFormat,
            self.fraBackgrounds,
            self.fraMisc,
            self.fraOutfile,
            self.fraAdvanced]
        for frame in frames:
            try:
                frame.setOptions(cmd)
            except MissingOption, err:
                print "Missing a required option: %s" % err.message
                raise
        return cmd

    def showAdvanced(self):
        """Show/hide the "advanced options" frame in a popup window."""
        if self.advanced_visible:
            self.btnAdvanced.config(text="Advanced >>")
            self.advanced_visible = False
            self.fraAdvanced.grid_forget()
            self.update()
        else:
            self.btnAdvanced.config(text="Advanced <<")
            self.advanced_visible = True
            self.fraAdvanced.grid(row=0, column=2, rowspan=8, sticky=NW)
            self.btnAdvanced.update()

    def runCommand(self):
        """Run the todisc command."""
        try:
            cmd = self.getCommand()
        except MissingOption, err:
            showerror("Missing option",
                      "Missing a required option: %s" % err.message)
            blink(err.widget)
            return
        # Show pretty-printed command
        pretty_cmd = pretty_todisc(cmd)
        print "Running command:"
        print pretty_cmd
        # Verify with user
        if askyesno(message="Run todisc now?"):
            root.withdraw()
            try:
                cmd.run()
            except KeyboardInterrupt:
                showerror(message="todisc was interrupted!")
            else:
                showinfo(message="todisc finished running!")
            root.deiconify()

    def setTheme(self, theme='default'):
        """Set widget styles to match a theme. This must be called before
        widgets are created, and does not apply to widgets already created.
        """
        if theme == 'light':
            print "Using 'light' theme"
            #self.option_add("*Frame*background", '#808080')
            self.option_add("*Entry.relief", GROOVE)
            self.option_add("*Listbox.relief", GROOVE)
            self.option_add("*Button.relief", GROOVE)
            self.option_add("*Frame*font",
                            ("Helvetica", 12))
        else:  # theme == 'default' or anything else
            print "Using default theme"
            self.option_add("*Entry.relief", SUNKEN)
            self.option_add("*Listbox.relief", SUNKEN)
            self.option_add("*Button.relief", RAISED)
            self.option_add("*Frame*font",
                            ("Helvetica", 10, "bold"))
        # These apply to all themes
        self.option_add("*Entry.background", 'white')
        self.option_add("*Listbox.background", 'white')

### --------------------------------------------------------------------
### Entry point
### --------------------------------------------------------------------

root = Tk()
if __name__ == '__main__':
    # Single argument: theme name 'default' or 'light'
    theme = 'default'
    if len(sys.argv) > 1:
        theme = sys.argv[1]

    root.title("tktodisc: A todisc GUI")
    app = Application(root, theme)
    root.mainloop()

