#! /usr/bin/env python
# tktodisc

"""A Tkinter graphical user interface for tovid. Highly experimental."""

"""Note on notation:

tkinter widgets variable names shall use a prefix describing widget type, and
camel-case for remaining words, i.e.

    fraFoo: Frame
    mnuFoo: Menu
    lblFoo: Label
    btnFoo: Button
    entFoo: Entry
    lstFoo: Listbox
    chkFoo: Checkbox
    rbFoo:  Radiobutton
    varFoo: Control variable (Variable, StringVar, IntVar, DoubleVar)

Ideas for later:

Use dictionaries for accessing Widgets inside of classes, i.e.
    self.lblTitles --> self.lbl['Titles']
    self.entTitles --> self.ent['Titles']
This may simplify automated widget-instantiation later.

    
"""

import os
from Tkinter import *
from tkFileDialog import *
from tkMessageBox import *
from libtovid.cli import Command

# ============================
#
# Frames for grouping controls
#
# ============================

class FormatFrame(Frame):
    """A frame containing controls suitable for setting disc format
    (VCD, SVCD, DVD, etc.)"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.rbFormat = {}            # Radiobuttons, indexed by format name
        self.varFormat = StringVar()  # Currently selected format
        self.grid()    
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Label
        self.lbl = Label(self, text="Disc format:")
        self.lbl.pack(side=LEFT)
        # Radio buttons
        for format in ['DVD', 'VCD', 'SVCD']:
            self.rbFormat[format] =\
                Radiobutton(self,
                            text = format,
                            value = format,
                            variable = self.varFormat,
                            command = self.changeFormat)
            self.rbFormat[format].pack(side=LEFT)
        self.varFormat.set('DVD')
        
    def changeFormat(self):
        """Event handler called when format radio buttons are clicked."""
        print "Disc format: %s" % self.varFormat.get()
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        format = str(self.varFormat.get()).lower()
        command.add('-%s' % format)


class TvsysFrame(Frame):
    """A frame containing controls suitable for setting TV system (PAL, NTSC).
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.rbTvsys = {}         # Radiobuttons, indexed by tvsys name
        self.varTvsys = StringVar()  # Currently selected tvsys
        self.grid()
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Label
        self.label = Label(self, text="TV system:")
        self.label.pack(side=LEFT)
        # Radio buttons
        for tvsys in ['NTSC', 'PAL']:
            self.rbTvsys[tvsys] =\
                Radiobutton(self,
                            text = tvsys,
                            value = tvsys,
                            variable = self.varTvsys,
                            command = self.changeTvsys)
            self.rbTvsys[tvsys].pack(side=LEFT)
        self.varTvsys.set('NTSC')
    
    def changeTvsys(self):
        """Event handler called when TV system radio buttons are clicked."""
        print "TV system: %s" % self.varTvsys.get()
        
    def setOptions(self, command):
        tvsys = str(self.varTvsys.get()).lower()
        command.add('-%s' % tvsys)


class FileListFrame(Frame):
    """A frame containing a list of filenames, and controls to add or delete
    files from the list.
    """
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.curtitle = StringVar()  # Text of the currently selected title
        self.varFiles = Variable()      # List of current files
        self.varTitles = Variable()     # List of current titles
        self.curindex = 0
        self.grid()
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        # Scrollbar to control both listboxes
        self.scrollbar = Scrollbar(self, orient=VERTICAL)
        self.scrollbar.grid(row=1, column=3, sticky=N+S)
        self.scrollbar.config(command=self.scroll)
        # File list box and add/remove buttons
        self.lblFiles = Label(self, text="Files")
        self.lblFiles.grid(row=0, column=0, columnspan=2, sticky=W)
        self.lstFiles = Listbox(self, width=30, background='white',
                                listvariable=self.varFiles,
                                yscrollcommand=self.scrollbar.set)
        self.lstFiles.bind('<Button-1>', self.selectListitem)
        self.lstFiles.bind('<B1-Motion>', self.dragListitem)
        self.lstFiles.grid(row=1, column=0, columnspan=2)
        self.btnAdd = Button(self, text="Add...", command=self.addFiles)
        self.btnAdd.grid(row=2, column=0, sticky=E+W)
        self.btnRemove = Button(self, text="Remove",
                                   command=self.removeFiles)
        self.btnRemove.grid(row=2, column=1, sticky=E+W)
        # Title list box and editing field
        self.lblTitles = Label(self, text="Titles")
        self.lblTitles.grid(row=0, column=2, sticky=W)
        self.lstTitles = Listbox(self, width=30, background='white',
                                 listvariable=self.varTitles,
                                 yscrollcommand=self.scrollbar.set)
        self.lstTitles.bind('<Button-1>', self.selectListitem)
        self.lstTitles.bind('<B1-Motion>', self.dragListitem)
        self.lstTitles.grid(row=1, column=2)
        self.entTitle = Entry(self, width=30, background='white',
                              textvariable=self.curtitle)
        self.entTitle.bind('<Return>', self.setTitle)
        self.entTitle.grid(row=2, column=2)

    def scroll(self, *args):
        """Event handler when scrollbar is moved."""
        apply(self.lstFiles.yview, args)
        apply(self.lstTitles.yview, args)
        
    def selectListitem(self, event):
        """Event handler when a filename or title in the list is selected."""
        self.curindex = self.lstFiles.nearest(event.y)
        self.curtitle.set(self.lstTitles.get(self.curindex))

    def dragListitem(self, event):
        """Event handler to move a file/title to another position in the list"""
        loc = self.lstFiles.nearest(event.y)
        if loc != self.curindex:
            file = self.lstFiles.get(self.curindex)
            title = self.lstTitles.get(self.curindex)
            self.lstFiles.delete(self.curindex)
            self.lstTitles.delete(self.curindex)
            self.lstFiles.insert(loc, file)
            self.lstTitles.insert(loc, title)
            self.curindex = loc

    def setTitle(self, event):
        """Event handler when Enter is pressed after editing a title."""
        newtitle = self.curtitle.get()
        print "Setting title to '%s'" % newtitle
        self.lstTitles.delete(self.curindex)
        self.lstTitles.insert(self.curindex, newtitle)
        
    def addFiles(self):
        """Event handler for adding files to the list box"""
        files = askopenfilenames(parent=self, title='Add files')
        for file in files:
            print "Adding '%s' to the file list" % file
            self.lstFiles.insert(END, file)
            # Add a dummy title (with pathname removed)
            title = file.split('/')[-1]
            self.lstTitles.insert(END, title)

    def removeFiles(self):
        """Event handler for removing files from the list box"""
        selection = self.lstFiles.curselection() \
                  or self.lstTitles.curselection()
        # Using reverse order prevents reflow from messing up indexing
        for line in reversed(selection):
            print "Removing '%s' from the file list" % self.lstFiles.get(line)
            self.lstFiles.delete(line)
            self.lstTitles.delete(line)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        files = self.varFiles.get()
        titles = self.varTitles.get()
        if len(files) != len(titles):
            # Should never happen, if the listboxes are properly in sync
            print "WARNING: Number of files and titles do not match"
        if len(files) == 0:
            print "WARNING: No input files selected"
        if len(titles) == 0:
            print "WARNING: No input titles selected"
        command.add('-files')
        for file in files:
            command.add(file)
        command.add('-titles')
        for title in titles:
            command.add(title)


class BrowseButton(Button):
    """A "Browse" button that opens a file browser for loading/saving a file."""
    def __init__(self, master=None, type='load', textvariable=None,
                 title="Select a file"):
        """Create a file-browser button.
        
            master:       Widget to use as master
            type:         What kind of file dialog to use ('load' or 'save')
            title:        Text to display in the titlebar of the file dialog
            textvariable: A StringVar to store selected filename(s)
        """ 
        Button.__init__(self, master, text="Browse...", command=self.onClick)
        self.type = type
        self.title = title
        self.textvariable = textvariable

    def onClick(self, event=None):
        """Event handler when button is pressed"""
        if self.type == 'load':
            filename = askopenfilename(parent=self, title=self.title)
        elif self.type == 'save':
            filename = asksaveasfilename(parent=self, title=self.title)
        else:
            raise ValueError, "Browse button type must be 'load' or 'save'"
        if filename and self.textvariable:
            self.textvariable.set(filename)


class BackgroundsFrame(Frame):
    """Widgets for setting background image, video and audio"""
    def __init__(self, master=None):
        Frame.__init__(self, master, borderwidth=1, relief=SUNKEN)
        self.varImage = StringVar()
        self.varVideo = StringVar()
        self.varAudio = StringVar()
        self.grid()
        self.drawWidgets()

    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.lblHeading = Label(self, text="Menu backgrounds")
        self.lblHeading.grid(row=0, columnspan=3, sticky=W)
        # BG image
        self.lblImage = Label(self, text="Image:")
        self.lblImage.grid(row=1, column=0)
        self.entImage = Entry(self, width=40, background='white',
                              textvariable=self.varImage)
        self.entImage.grid(row=1, column=1)
        self.btnImage = BrowseButton(self, 'load', self.varImage,
                                     "Select an image file")
        self.btnImage.grid(row=1, column=2)
        # BG video
        self.lblVideo = Label(self, text="Video:")
        self.lblVideo.grid(row=2, column=0)
        self.entVideo = Entry(self, width=40, background='white',
                              textvariable=self.varVideo)
        self.entVideo.grid(row=2, column=1, sticky=E+W)
        self.btnVideo = BrowseButton(self, 'load', self.varVideo,
                                     "Select a video file")
        self.btnVideo.grid(row=2, column=2)
        # BG audio
        self.lblAudio = Label(self, text="Audio:")
        self.lblAudio.grid(row=3, column=0)
        self.entAudio = Entry(self, width=40, background='white',
                              textvariable=self.varAudio)
        self.entAudio.grid(row=3, column=1)
        self.btnAudio = BrowseButton(self, 'load', self.varAudio,
                                     "Select an audio file")
        self.btnAudio.grid(row=3, column=2)
    
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        if self.varImage.get():
            command.add('-bgimage', self.varImage.get())
        if self.varVideo.get():
            command.add('-bgvideo', self.varVideo.get())
        if self.varAudio.get():
            command.add('-bgaudio', self.varAudio.get())


class OutfileFrame(Frame):
    """A frame containing an output-file text entry/browser box."""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.varOutfile = StringVar() # Current output filename
        self.grid()
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.lblOutfile = Label(self, text="Output file:")
        self.lblOutfile.pack(side=LEFT)
        self.entOutfile = Entry(self, width=40, background='white',
                                textvariable=self.varOutfile)
        self.entOutfile.pack(side=LEFT)
        self.btnOutfile = BrowseButton(self, 'save', self.varOutfile,
                                       "Select an output name")
        self.btnOutfile.pack(side=LEFT)

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        outfile = self.varOutfile.get()
        if not outfile:
            print "WARNING: No output file selected"
        command.add('-out', outfile)


class TitleFrame(Frame):
    """A frame containing options for customizing titles"""
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.varTitle = StringVar() # Current title
        self.grid()
        self.drawWidgets()
        
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.lblTitle = Label(self, text="Menu title:")
        self.lblTitle.pack(side=LEFT)
        self.entTitle = Entry(self, width=30, background='white',
                              textvariable=self.varTitle)
        self.entTitle.pack(side=LEFT)
        self.varTitle.set("My video collection")

    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        title = self.varTitle.get()
        if title:
            command.add('-menu-title', title)


class MiscOptionsFrame(Frame):
    """A frame containing miscellaneous options"""
    # TODO: Categorize these as needed and separate into new Frame subclasses
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.varStatic = BooleanVar()    # Static menus
        self.varSubmenus = BooleanVar()  # Create submenus
        self.varCustom = StringVar()     # Custom todisc options
        self.drawWidgets()
    
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.chkStatic = Checkbutton(self,
                                     text="Static menus (takes less time)",
                                     variable=self.varStatic)
        self.chkStatic.grid(columnspan=2, sticky=W)
        self.chkSubmenus = Checkbutton(self,
                                       text="Create submenus (takes more time)",
                                       variable=self.varSubmenus)
        self.chkSubmenus.grid(columnspan=2, sticky=W)
        self.lblCustom = Label(self, text="Custom todisc options:")
        self.lblCustom.grid(row=2, column=0)
        self.entCustom = Entry(self, width=40, background='white',
                               textvariable=self.varCustom)
        self.entCustom.grid(row=2, column=1)
        
    def setOptions(self, command):
        """Add relevant todisc options to the given Command."""
        if self.varStatic.get():
            command.add('-static')
        if self.varSubmenus.get():
            command.add('-submenus')
        # Hack alert: Splitting on ' ' may not work in some cases
        if self.varCustom.get():
            custom = self.varCustom.get().split(' ')
            for opt in custom:
                command.add(opt)


# ============================
#
# Main application window
#
# ============================

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.drawWidgets()
        
    def drawWidgets(self):
        """Draw all the widgets in this frame."""
        self.fraTitle = TitleFrame(self)
        self.fraTitle.grid(sticky=W)
        
        self.fraFileList = FileListFrame(self)
        self.fraFileList.grid(sticky=W)

        self.fraFormat = FormatFrame(self)
        self.fraFormat.grid(sticky=W)

        self.fraTvsys = TvsysFrame(self)
        self.fraTvsys.grid(sticky=W)

        self.fraBackgrounds = BackgroundsFrame(self)
        self.fraBackgrounds.grid(sticky=W)
        
        self.fraMisc = MiscOptionsFrame(self)
        self.fraMisc.grid(sticky=W)

        self.fraOutfile = OutfileFrame(self)
        self.fraOutfile.grid(sticky=W)

        fraButtons = Frame(self)
        self.btnCommand = Button(fraButtons, text="Show todisc command",
                                 command=self.showCommand)
        self.btnCommand.pack(side=LEFT)
        self.btnRun = Button(fraButtons, text="Run todisc command",
                             command=self.runCommand)
        self.btnRun.pack(side=LEFT)
        self.btnQuit = Button(fraButtons, text="Quit", command=self.quit)
        self.btnQuit.pack(side=LEFT)
        fraButtons.grid()

    def getCommand(self):
        """Return the complete todisc command."""
        cmd = Command('todisc')
        self.fraTitle.setOptions(cmd)
        self.fraFileList.setOptions(cmd)
        self.fraFormat.setOptions(cmd)
        self.fraTvsys.setOptions(cmd)
        self.fraBackgrounds.setOptions(cmd)
        self.fraMisc.setOptions(cmd)
        self.fraOutfile.setOptions(cmd)
        #cmd.add('-from-gui')
        return cmd

    def showCommand(self):
        """Show the todisc command that would be run."""
        print self.getCommand()

    def runCommand(self):
        """Run the todisc command."""
        cmd = self.getCommand()
        print "Running command:"
        print cmd
        # Verify with user
        if askyesno(message="Run todisc now?"):
            try:
                cmd.run()
                showinfo(message="todisc finished running!")
            except KeyboardInterrupt:
                showerror(message="todisc was interrupted!")

# ============================
#
# Entry point
#
# ============================

if __name__ == '__main__':
    app = Application()
    app.master.title("tktodisc: A todisc GUI")
    app.mainloop()
