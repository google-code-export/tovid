#! /usr/bin/env python
# tovid-metagui

"""Experimental tovid suite GUI, without any Tkinter code.

Run this script standalone for a demonstration:

    $ python tovid-metagui


INTRODUCTION

This module demonstrates a simplified approach to creating GUIs for
command-line programs. It's designed so _anyone_ can easily write their
own GUI, without having any programming experience.

It assumes your GUI is a direct frontend to one or more command-line programs,
with each command-line option having an associated GUI control widget. Several
kinds of widget are provided, for setting Filename, Color, Number or Font, or
for picking a Choice or Flag.

You probably know of a handful of command-line applications that would be
much better with a GUI, even a cheesy-looking Tkinter one. This module shows
how easy it is to create one.


CONTROLS

Say, if you have a program that takes input and output filenames:

    $ tovid -in movie.avi -out movie_encoded

then you can create GUI widgets for those options like this:

    Filename('-in', "Input filename")
    Filename('-out', "Output prefix")

These have the general format:

    Control('-option', "Label", ...)

where:

    Control   is a Control subclass, such as Filename, Choice, or Number,
              describing what type of value is being controlled;
    'option'  is a command-line option (without the leading '-'),
              whose value is set by the Control; and
    "Label"   is the text that should appear next to the GUI Control.

Other parameters include default value, help/tooltip text to show, allowable
values, and hints about how to draw the GUI control widget; they are specific
to the flavor of Control being used. For a full list of available Control
subclasses and how to use them, see libtovid/metagui/control.py.

This is 90% of the syntax you need to learn for creating your own GUIs. If
you understand the above, you're almost ready to...


CREATE A GUI

First, give your Controls a place to live, in a Panel:

    general = Panel("General",
        Filename('-bgaudio', "Background audio file"),
        Flag('-submenus', "Create submenus"),
        Number('-menu-length', "Length of menu (seconds)", 0, 120)
        )

This will create three GUI widgets in a Panel labeled "General": one for typing
or browsing to a filename, one for enabling or disabling submenus, and another 
for setting menu length to a number between 0 and 120. You can nest panels
inside one another for grouping; sub-Panels have their own label and list of
Controls or sub-Panels.

Once you have a Panel, you can create an Application:

    app = Application('todisc', [general])

This says your application will run the 'todisc' command-line program,
passing options set by the "General" panel. Now, create the GUI:

    gui = GUI('MyGUI', [app])
    gui.run()

This creates the GUI, draws all the widgets, and will run your command-line
program at the push of a button.


CREATE A MULTI-PANEL GUI

If your program has a lot of options, one panel may not be enough to hold them
all without looking cluttered, so you may break them down into multiple Panels,
which will be shown in the GUI as tabs that you can switch between. Create
Panels like this:

    thumbs = Panel("Thumbnails",
        Color('-thumb-mist-color', ...),
        Text('-wave', ...)
    )
    text = Panel("Text",
        Font('-menu-font', ...),
        Number('-menu-fontsize', ...)
    )

then, create the Application and GUI:

    todisc = Application('todisc', [thumbs, text])
    gui = GUI('MyGUI', [todisc])
    gui.run()

If multiple panels are given to Application, a tabbed interface is created,
with one tab for each panel.


CREATE A MULTI-APPLICATION GUI

If your GUI needs to be able to run several different command-line programs,
you can create a multi-application GUI. Create panels for each application,
then create the applications:

    todisc = Application('todisc', [todisc_panel1, todisc_panel2])
    tovid = Application('tovid', [tovid_panel1, tovid_panel2])

and then the GUI:

    gui = GUI('MultiGUI', [todisc, tovid])
    gui.run()

Run this script standalone for a demonstration of this feature.
"""

# Get supporting classes from libtovid.metagui
from libtovid.metagui import *

### --------------------------------------------------------------------
### tovid
### --------------------------------------------------------------------

_in = Filename('Input filename', '-in', '',
    'Video file to encode',
    'load', 'Select a video file')
_out = Filename('Output prefix', '-out', '',
    'Name to use for encoded output file (.mpg added automatically)',
    'save', 'Choose an output prefix')

# Formats
_dvd = Flag("DVD", '-dvd', True,
    "(720x480 NTSC, 720x576 PAL) DVD-compatible output. May be burned "
    "to a DVD[+/-]R[W] disc. Also known as Digital [Versatile|Video] Disc, "
    "or just DVD depending on who you talk to.")
_svcd = Flag("Super Video CD (SVCD)", '-svcd', False,
    "(480x480 NTSC, 480x576 PAL) Super Video CD format, may be burned "
    "to a CD-R. Like VCD but with better resolution and variable bitrate. "
    " About 1 hour of playing time per disc.")
_vcd = Flag("Video CD (VCD)", '-vcd', False,
    "(320x240 NTSC, 320x288 PAL) Video CD format, may be burned to a CD-R. "
    "About 1 hour of playing time per disc.")

_dvd_vcd = Flag('VCD-on-DVD', '-dvd-vcd', False,
    '(352x240 NTSC, 352x288 PAL) VCD-on-DVD output')
_half_dvd = Flag('Half-DVD', '-half-dvd', False,
    '(352x480 NTSC, 352x576 PAL) Half-D1-compatible output')
_kvcd = Flag('KVCD', '-kvcd', False,
    '(352x240 NTSC, 352x288 PAL) KVCD-enhanced long-playing video CD')
_kvcdx3 = Flag('KVCDx3', '-kvcdx3', False,
    '(528x480 NTSC, 520x576 PAL) KVCDx3 specification')
_kvcdx3a = Flag('KVCDx3A', '-kvcdx3a', False,
    '(544x480 NTSC, 544x576 PAL) KVCDx3a specification')
_kdvd = Flag('KDVD', '-kdvd', False,
    '(720x480 NTSC, 720x576 PAL) KVCD-enhanced long-playing DVD')
_bdvd = Flag('BDVD', '-bdvd', False,
    '(720x480 NTSC, 720x576 PAL) BVCD-enhanced long-playing DVD')

# Aspect ratio
_full = Flag('4:3 (full-frame)', '-full', True)
_wide = Flag('16:9 (widescreen)', '-wide', False)
_panavision = Flag('2.35:1 (panavision)', '-panavision', False)


# TV Systems
_ntsc = Flag("NTSC", '-ntsc', True, "NTSC, US standard, 29.97 fps")
_ntscfilm = Flag("NTSC Film", '-ntscfilm', False, "NTSC Film, 23.976 fps")
_pal = Flag("PAL", '-pal', False, "PAL, European standard, 25.00 fps")



# Video quality/size controls
_quality = Number('Quality', '-quality', 6,
    'Quality of encoding, on a scale of 1-10, with 10 giving the best '
    'quality, at the expense of a larger output file.',
    1, 10, 'spin')
_vbitrate = Number('Bitrate', '-vbitrate', 0,
    'Target video bit rate, in kilobits per second. Higher bit rates '
    'give better quality, but a larger output file.',
    0, 9000, units='kbits/sec')
_fit = Number('Fit to', '-fit', 0,
    'Fit the output file into the given size in MiB (2^20 bytes). '
    'Video bitrate and quantization are chosen to ensure the target size '
    'is not exceeded. Ignored for VCD, which has constant bitrate.',
    0, 4400, units='MiB')
_discsize = Number('Disc size', '-discsize', 0,
    'Size of target media, in MiB (2^20 bytes). Output will be split into '
    'chunks of this size.',
    0, 4400, units='MiB')


### ---------------------------------------------------------------------------

# Encoder options
_mplayeropts = SpacedText('mplayer options', '-mplayeropts', '', 'TODO: Tooltip')
_filters = Choice('mplayer filters', '-filters', 'none', 'TODO: Tooltip',
    'none|denoise|deblock|contrast|all', packside='top')

_ffmpeg = Flag('Encode using ffmpeg', '-ffmpeg', False)
_parallel = Flag('Parallel video/audio encoding', '-parallel', False,
    "(mpeg2enc only) Rip, encode, and multiplex in parallel.")


# Video encoding options

# Interlacing
_interlaced = Flag('Interlaced encoding', '-interlaced', False,
    "Do interlaced encoding. Use this if your source material is interlaced.")
_interlaced_bf =Flag('Interlaced (bottom first)', '-interlaced_bf', False,
    "Do interlaced encoding, bottom-field first. Use this if "
    "the -interlaced option produces bad output.")
_deinterlace = Flag('Deinterlace', '-deinterlace', False,
    "Deinterlace the input video, and create a progressive-scan output. "
    "Degrades video quality considerably.")

# Picture manipulation
_safe = Number('Safe area', '-safe', 90,
    'Safe area as a percentage of screen size',
    50, 100, 'scale')
_crop = Text('Crop', '-crop', '', 'TODO: Tooltip')
_slice = Number('Slice', '-slice', 0, 'TODO: Tooltip', 0, 220000)


_fps = Text('FPS', '-fps', '', 'TODO: Tooltip')
_type = Choice('Video type', '-type', 'live', 'TODO: Tooltip',
    'live|animation|bw', packside='top')


# Subtitles
_autosubs = Flag('Auto-subtitles', '-autosubs', False, 'TODO: Tooltip')
_mkvsub = Text('mkvsub', '-mkvsub', '', 'TODO: Tooltip')
_subtitles = Filename('subtitles', '-subtitles', '', 'TODO: Tooltip',
    'load', 'Select an image or video file')


# Audio options
_normalize = Flag('Normalize', '-normalize', False, 'TODO: Tooltip')
_downmix = Flag('Downmix', '-downmix', False, 'TODO: Tooltip')
_audiotrack = SpacedText('Audio track', '-audiotrack', '', 'TODO: Tooltip')
_abitrate = Number('Audio bitrate', '-abitrate', 0,
    'Audio bitrate to encode to. Reasonable values include 128, 224, and 384.',
    128, 384, units='kbits/sec')
_amplitude = Text('Amplitude', '-amplitude', '', 'TODO: Tooltip')
_async = Number('Audio sync', '-async', 0, 'Adjust audio synchronization',
    -600, 600, units='secs')

# Runtime behavior
_config = Filename('Configuration file', '-config', '', 'TODO: Tooltip',
    'load', 'Select tovid configuration file')
# File-related
_keepfiles = Flag('Keep temporary files', '-keepfiles')
_overwrite = Flag('Overwrite files', '-overwrite')
_nofifo = Flag('No FIFO', '-nofifo', False,
    "Don't use a FIFO (pipe) when encoding. Instead, write "
    "intermediate conversion files to disk. May take "
    "up lots of space!")

_priority = Choice('Process priority', '-priority', 'high', 'TODO: Tooltip',
    'low|medium|high')
_update = Number('Update interval', '-update', 5, 'TODO: Tooltip', 1, 20)
_quiet = Flag('Quiet', '-quiet')
_fake = Flag('Fake encoding', '-fake')
_force = Flag('Force encoding', '-force')

# Prompting
_noask = Flag('No prompts',  '-noask', False, 'TODO: Tooltip')
_from_gui = Flag('From GUI', '-from-gui', True)


### ---------------------------------------------------------------------------
### Higher-level groups and panels
### ---------------------------------------------------------------------------

IN_OUT = VPanel('Filenames', _in, _out)

FORMATS = FlagGroup('Disc format', 'exclusive',
    _dvd, _svcd, _vcd,
    _dvd_vcd, _half_dvd, _kvcd,
    _kvcdx3a, _kdvd, _bdvd,
    side='top',
    columns=3)


ASPECT = FlagGroup('Aspect ratio', 'exclusive', _full, _wide, _panavision)
TVSYS = FlagGroup('TV System', 'exclusive', _ntsc, _ntscfilm, _pal)
INTERLACE = FlagGroup('Interlacing', 'exclusive',
    _interlaced, _deinterlace, _interlaced_bf)


MAIN = VPanel('Main',
    IN_OUT,
    FORMATS,
    HPanel('Output file size', _quality, _vbitrate, _fit, _discsize),
    HPanel('', TVSYS, ASPECT, INTERLACE),
)


VIDEO = HPanel('Video',
    VPanel('Encoder options',
        FlagGroup('', 'exclusive', _ffmpeg, _parallel),
        _filters,
        _mplayeropts,
        _force,
    ),
    VPanel('Picture manipulation',
        _safe, _crop, _slice, _fps, _type),
)

AUDIO = VPanel('Audio & Subtitles',
    _normalize,
    _downmix,
    _audiotrack,
    _abitrate,
    _amplitude,
    _async,
    _autosubs,
    _mkvsub,
    _subtitles,
)


BEHAVIOR = VPanel('Behavior',
    _config,
    _priority,
    VPanel('File output', _fake, _overwrite, _keepfiles, _nofifo),
    VPanel('Prompts and output options', _quiet, _noask, _from_gui, _update)
)

tovid_panel = Tabs('',
    MAIN,
    VIDEO,
    AUDIO,
    BEHAVIOR,
)

### --------------------------------------------------------------------
### main GUI
### --------------------------------------------------------------------

tovid = Application('tovid', tovid_panel)
gui = GUI("tovid metagui", 640, 720, tovid)
gui.run()
