#! /usr/bin/env python
# tovid-metagui

"""Experimental tovid suite GUI, without any Tkinter code.

Run this script standalone for a demonstration:

    $ python tovid-metagui


INTRODUCTION

This module demonstrates a simplified approach to creating GUIs for
command-line programs. It's designed so _anyone_ can easily write their
own GUI, without having any programming experience.

It assumes your GUI is a direct frontend to one or more command-line programs,
with each command-line option having an associated GUI control widget. Several
kinds of widget are provided, for setting Filename, Color, Number or Font, or
for picking a Choice or Flag.

You probably know of a handful of command-line applications that would be
much better with a GUI, even a cheesy-looking Tkinter one. This module shows
how easy it is to create one.


CONTROLS

Say, if you have a program that takes input and output filenames:

    $ tovid -in movie.avi -out movie_encoded

then you can create GUI widgets for those options like this:

    Filename('in', "Input filename")
    Filename('out', "Output prefix")

These have the general format:

    Control('option', "Label", ...)

where:

    Control   is a Control subclass, such as Filename, Choice, or Number,
              describing what type of value is being controlled;
    'option'  is a command-line option (without the leading '-'),
              whose value is set by the Control; and
    "Label"   is the text that should appear next to the GUI Control.

Other parameters include default value, help/tooltip text to show, allowable
values, and hints about how to draw the GUI control widget; they are specific
to the flavor of Control being used. For a full list of available Control
subclasses and how to use them, see libtovid/metagui/control.py.

This is 90% of the syntax you need to learn for creating your own GUIs. If
you understand the above, you're almost ready to...


CREATE A GUI

First, give your Controls a place to live, in a Panel:

    general = Panel("General",
        Filename('bgaudio', "Background audio file"),
        Flag('submenus', "Create submenus"),
        Number('menu-length', "Length of menu (seconds)", 0, 120)
        )

This will create three GUI widgets in a Panel labeled "General": one for typing
or browsing to a filename, one for enabling or disabling submenus, and another 
for setting menu length to a number between 0 and 120. You can nest panels
inside one another for grouping; sub-Panels have their own label and list of
Controls or sub-Panels.

Once you have a Panel, you can create an Application:

    app = Application('todisc', [general])

This says your application will run the 'todisc' command-line program,
passing options set by the "General" panel. Now, create the GUI:

    gui = GUI('MyGUI', [app])
    gui.run()

This creates the GUI, draws all the widgets, and will run your command-line
program at the push of a button.


CREATE A MULTI-PANEL GUI

If your program has a lot of options, one panel may not be enough to hold them
all without looking cluttered, so you may break them down into multiple Panels,
which will be shown in the GUI as tabs that you can switch between. Create
Panels like this:

    thumbs = Panel("Thumbnails",
        Color('thumb-mist-color', ...),
        Text('wave', ...)
    )
    text = Panel("Text",
        Font('menu-font', ...),
        Number('menu-fontsize', ...)
    )

then, create the Application and GUI:

    todisc = Application('todisc', [thumbs, text])
    gui = GUI('MyGUI', [todisc])
    gui.run()

If multiple panels are given to Application, a tabbed interface is created,
with one tab for each panel.


CREATE A MULTI-APPLICATION GUI

If your GUI needs to be able to run several different command-line programs,
you can create a multi-application GUI. Create panels for each application,
then create the applications:

    todisc = Application('todisc', [todisc_panel1, todisc_panel2])
    tovid = Application('tovid', [tovid_panel1, tovid_panel2])

and then the GUI:

    gui = GUI('MultiGUI', [todisc, tovid])
    gui.run()

Run this script standalone for a demonstration of this feature.
"""

# Get supporting classes from libtovid.metagui
from libtovid.metagui import *

### --------------------------------------------------------------------
### todisc panels
### --------------------------------------------------------------------

# Control(option, label, default, help, ...)
main = Panel("Main",
    Text('menu-title',
        'Menu title', 'My video collection',
        'Title text displayed on the main menu'),
    FileList('files',
        'Video files', None,
        'Video files to include on the disc'),
    TextList('titles',
        'Video titles', None,
        'Titles for each video'),
    Choice('format',
        'Disc format', 'DVD',
        'Format of disc to create; SVCD can be burned to a CD-R',
        'DVD|SVCD'),
    Choice('tvsys',
        'TV system', 'NTSC',
        'Standard TV system to use',
        'NTSC|PAL'),
    Filename('background',
        'Background image or video', '',
        'Image or video file to display in the background of the main menu',
        'load', 'Select an image or video file'),
    Filename('bgaudio',
        'Background audio', '',
        'Audio file to play while the main menu is showing',
        'load', 'Select an audio file'),
    Flag('static',
        'Static menus', False,
        'Create still-image menus; takes less time'),
    Flag('submenus',
        'Create Submenus', False,
        'Create a submenu for each video title; takes more time'),
    Filename('out',
        'Output name', '',
        'Name to use for the output directory where the disc will be created.',
        'save', 'Choose an output name')
)

general = Panel("General",
    FlagGroup('Menu style', 'none',
        "Style to use for the main DVD menu. Default is a grid of thumbnails,"\
        " large and centered. Showcase shows thumbnails around a showcased"\
        " image or video in the center, and Textmenu avoids thumbnails"\
        " altogether, and just shows text on a static or animated background.",
        'exclusive',
        Flag('none', "Default: Thumbnail grid"),
        Flag('showcase', "Showcase: Large central image or video"),
        Flag('textmenu', "Textmenu: Text on a background")
        ),
    Filename('showcase',
        'Showcase', '',
        'Image or video file to be showcased in a large central frame',
        'load', 'Select an image or video file.'),
    Filename('background',
        'Background', '',
        'Image or video displayed in the background of the main menu',
        'load', 'Select an image or video file'),
    Filename('bgaudio',
        'Audio', '',
        'Audio file played while the main menu is showing',
        'load', 'Select an audio file'),
    Flag('submenus',
        'Create submenus', False),
    Flag('static',
        'Static menus (takes less time)', False),
    Text('menu-title',
        'Menu title', '',
        'Title of the main menu'),
    Number('menu-length',
        'Menu length', 30,
        'Duration of menu in seconds',
        0, 120, 'scale'),
    Flag('keep-files',
        'Keep useful intermediate files on exit', False),
    Flag('no-ask',
        'No prompts for questions', False),
    Flag('no-warn',
        'Do not pause at warnings', False),
    Flag('use-makemenu',
        'Use makemenu', False,
        'Create menus using the makemenu script instead of todisc'),
    Text('tovidopts',
        'Custom tovid options', '',
        "Space-separated list of options to pass to tovid for encoding.")
)

menu = Panel("Menu",
    Flag('ani-submenus',
        'Animated submenus (takes more time)', False,
        'tooltip'),
    Flag('menu-fade',
        'Fade in menu', False,
        'tooltip'),
    Panel("Seek times",
          List('seek',
              'Seek time', '',
              'Play thumbnail videos from the given seek time (seconds)'),
          Number('bgvideo-seek',
              'Background video seek time', 2,
              'Play background video from the given seek time (seconds)',
              0, 3600, 'scale'),
          Number('bgaudio-seek',
              'Background audio seek time', 2,
              'Play background audio from the given seek time (seconds)',
              0, 3600, 'scale'),
          Number('showcase-seek',
              'Showcase video seek time', 2,
              'Play showcase video from the given seek time (seconds)',
              0, 3600, 'scale')
    ),
    Choice('align',
        'Montage alignment', 'north',
        'Controls positioning of the thumbnails and their titles',
        'north|south|east|west'),
    Filename('intro',
        'Intro video', '',
        'Video to play before showing the main menu',
        'load', 'Select a video file'),
    Choice('showcase-titles-align',
        'Video(s) title alignment', 'west',
        'tooltip',
        'west|east|center'),
    Choice('showcase-framestyle',
        'Showcase frame style', 'none',
        'tooltip',
        'none|glass'),
    Text('showcase-geo',
        'Showcase image position (XxY', '',
        'tooltip')
)

thumbnails = Panel("Thumbnails",
    Flag('3dthumbs',
        'Create 3D thumbs', False,
        'tooltip'),
    Choice('thumb-shape',
        'Thumb shape', 'normal',
        'tooltip',
        'normal|oval|plectrum|egg'),
    Number('opacity',
        'Thumbnail opacity', 100,
        'tooltip',
        1, 100, 'spin'),
    Number('blur',
        'Blur', 4,
        'tooltip',
        1, 5, 'spin'),
    List('rotate-thumbs',
        'Rotate Thumbs (list)', '',
        'tooltip'),
    Text('wave',
        'Wave effect for showcase thumb', 'default',
        'tooltip'),
    Number('rotate',
        'Rotate Showcase thumb', 5,
        'tooltip',
        -30, 30, 'spin'),
    Color('thumb-mist-color',
        'Thumb mist color', 'white',
        'tooltip'),
    Flag('tile3x1',
        'Arrange thumb montage in 1 row of 3 thumbs', False,
        'tooltip')
)


audio = Panel("Audio",
    Number('menu-audio-length',
        'Menu audio length', 30,
        'tooltip',
        0, 120, 'scale'),
    Number('menu-audio-fade',
        'Menu audio fade', 1,
        'tooltip',
        0, 10, 'scale'),
    Filename('submenu-audio',
        'Submenu audio file', '',
        'tooltip',
        'load', 'Select an audio file, or video file with audio'),
    Number('submenu-audio-length',
        'Submenu audio length', 30,
        'tooltip',
        0, 120, 'scale'),
    Number('submenu-audio-fade',
        'Submenu audio fade', 1,
        'tooltip',
        0, 10, 'scale')
)


text = Panel("Text/Font",
    Font('menu-font',
        'Menu title font', 'Helvetica',
        'tooltip'),
    Font('thumb-font',
        'Video title(s) font', 'Helvetica',
        'tooltip'),
    Number('menu-fontsize',
        'Menu title font size', 20,
        'tooltip',
        0, 80, 'scale'),
    Number('thumb-fontsize',
        'Video title(s) font size', 12,
        'tooltip',
        0, 80, 'scale'),
    Color('title-color',
        'Title color', '',
        'tooltip'),
    Color('submenu-title-color',
        'Submenu title color', '',
        'tooltip'),
    Color('thumb-text-color',
        'Video title(s) color', '',
        'tooltip'),
    Panel("Mist",
          Flag('text-mist',
              'Text mist', False,
              'tooltip'),
          Panel("Nesting is fun",
                Color('text-mist-color',
                    'Text mist color', '',
                    'tooltip'),
                Number('text-mist-opacity',
                    'Text mist opacity', 60,
                    'tooltip',
                    1, 100, 'spin')
          ),
    ),
    Choice('menu-title-geo',
        'Menu title position', 'south',
        'tooltip',
        'north|south|west|east|center'),
    Text('menu-title-offset',
        'Offset for menu title position', '+0+0',
        'tooltip'),
    Color('stroke-color',
        'Stroke color', '',
        'tooltip'),
    Color('submenu-stroke-color',
        'Submenu stroke color', '',
        'tooltip'),
    Number('title-gap',
        'Space between Textmenu titles (pixels)', 2,
        'tooltip',
        0, 400, 'spin'),
    Number('text-start',
        'Start Textmenu titles at: (pixels)', 2,
        'tooltip',
        0, 460, 'spin')
)

authoring = Panel("Authoring",
    List('chapters',
        'Number of Chapters', '',
        'Single value or list'),
    List('chain-videos',
        'Chain videos together', '',
        'See "man todisc" for details'),
    Choice('widescreen',
        'Widescreen', None,
        'tooltip',
        'nopanscan|noletterbox'),
    Choice('aspect',
        'Aspect ratio', '4:3',
        'tooltip',
        '4:3|16:9'),
    Color('highlight-color',
        'Highlight color', '',
        'tooltip'),
    Color('select-color',
        'Selection color', '',
        'tooltip'),
    Choice('button-style',
        'Button style', 'rect',
        'tooltip',
        'rect|text|text-rect'),
    List('audio-lang',
        'Default audio language', '',
        'Single value or list'),
    List('subtitles',
        'Default subtitle language', '',
        'Single value or list'),
    Number('outlinewidth',
        'Outlinewidth for spumux buttons', 4,
        'tooltip',
        0, 20, 'scale'),
    Number('loop',
        'Loop', 10,
        'tooltip',
        0, 30, 'scale'),
    Flag('playall',
        '"Play all" button', False,
        'tooltip')
)
# Create the todisc application
todisc = Application('todisc',
    [main, general, menu, thumbnails, audio, text, authoring])


### --------------------------------------------------------------------
### tovid
### --------------------------------------------------------------------

# Create the tovid panels
tovid_panel = Panel("Main",
    Filename('in',
        'Input filename', '',
        'Video file to encode',
        'load', 'Select a video file'),
    Filename('out',
        'Output prefix', '',
        'Name to use for encoded output file (.mpg added automatically)',
        'save', 'Choose an output prefix'),
    FlagChoice('',
        'Video format', 'vcd',
        'Disc format of encoded file',
        [['vcd', "Video CD (VCD)"],
         ['svcd', "Super Vicdo CD (SVCD)"],
         ['dvd', "DVD"]],
        'top'),
    FlagChoice('',
        'TV system', 'ntsc',
        'Standard TV system, depending on your world region.',
        'ntsc|ntscfilm|pal'),
    Choice('aspect',
        'Aspect ratio', '4:3',
        'Intended display aspect ratio of input video',
        [['4:3', "4:3 (full-frame)"],
         ['16:9', "16:9 (widescreen)"],
         ['235:100', "2.35:1 (panavision)"]],
        'top'),
    Flag('ffmpeg',
        'Encode using ffmpeg', False),
    Number('quality',
        'Video quality', 6,
        'Quality of encoding, on a scale of 1-10.',
        1, 10, 'scale'),
    Flag('interlaced',
        'Interlaced encoding', False),
    Number('safe',
        'Safe area', 90,
        'Safe area as a percentage of screen size',
        50, 100, 'scale')
)

# Create the tovid application
tovid = Application('tovid', [tovid_panel])

### --------------------------------------------------------------------
### makemenu
### --------------------------------------------------------------------

# Create the makemenu panels
makemenu_panel = Panel("Main",
    Filename('background',
     'Background image', '',
     'TOOLTIP'),
    Flag('crop',
     'Crop background image', True,
     'Cut off the edges of the background image to make it fit into 4:3'),
    Flag('scale',
     'Stretch background image', False,
     'Scale or stretch the background image to fit the 4:3 frame'),
    Filename('audio',
     'Background audio', '',
     'Audio file to play while the menu is being shown'),
    Number('length',
     'Menu length', 4,
     'Duration of menu playback in seconds.',
     4, 600),
    Text('menu-title',
     'Menu title', '',
     'Title or heading for the menu'),
    Font('font',
     'Menu font', 'Helvetica',
     'TOOLTIP'),
    Number('fontsize',
     'Font size', 24,
     'TOOLTIP',
     8, 64, 'spin'),
    Number('menu-title-fontsize',
     'Title font size', 32,
     'Font size for the menu title',
     8, 64, 'spin'),
    Choice('align',
     'Text alignment', 'left',
     'TOOLTIP',
     'left|center|middle|right')
)
# Create the makemenu application
makemenu = Application('makemenu', [makemenu_panel])

### --------------------------------------------------------------------
### main GUI
### --------------------------------------------------------------------

# Create the GUI for both applications
gui = GUI("tovid metagui", [todisc, tovid, makemenu])

# Show the GUI window
gui.run()

