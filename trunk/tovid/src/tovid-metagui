#! /usr/bin/env python
# tovid-metagui

"""Experimental tovid suite GUI, without any Tkinter code.

Run this script standalone for a demonstration:

    $ python tovid-metagui


INTRODUCTION

This module demonstrates a simplified approach to creating GUIs for
command-line programs. It's designed so _anyone_ can easily write their
own GUI, without having any programming experience.

It assumes your GUI is a direct frontend to one or more command-line programs,
with each command-line option having an associated GUI control widget. Several
kinds of widget are provided, for setting Filename, Color, Number or Font, or
for picking a Choice or Flag.

You probably know of a handful of command-line applications that would be
much better with a GUI, even a cheesy-looking Tkinter one.


OPTION TUPLES

Say, if you have a program that takes input and output filenames:

    $ tovid -in movie.avi -out movie_encoded

then you can create GUI widgets for those options like this:

    ('in', Filename, "Input filename")
    ('out', Filename, "Output prefix")

Command-line options are associated with GUI widgets by enclosing a tuple of
things in parentheses. These have the general format:

    ('option', Control, "Label", ...)

where:

    'option'  is a command-line option (without the leading '-');
    Control   is a Control subclass, such as Filename, Choice, or Number,
              describing what type of value the option sets; and
    "Label"   is the text that should appear next to the GUI widget
              that controls the option's value.

Other parameters include default value, help/tooltip text to show, allowable
values, and hints about how to draw the GUI control widget; they are specific
to the flavor of Metawidget being used.

Option tuples are just an abstract way of describing a suitable GUI widget
for a certain command-line option. This is 90% of the syntax you need to
learn for creating your own GUIs. If you understand the above, you're almost
ready to...


CREATE A GUI

First, give your abstract option tuples a place to live, in a Panel:

    general = Panel("General",
        ('bgaudio', Filename, "Background audio file"),
        ('submenus', Flag, "Create submenus"),
        ('menu-length', Number, "Length of menu (seconds)", 0, 120)
        )

This will create three GUI widgets in a panel labeled "General": one for typing
or browsing to a filename, one for enabling or disabling submenus, and another 
for setting menu length to a number between 0 and 120.

Once you have a Panel, you can create an Application:

    app = Application('todisc', [general])

This says your application will run the 'todisc' command-line program,
passing options set by the "General" panel. Now, create the GUI:

    gui = GUI('MyGUI', [app])
    gui.run()

This creates the GUI, draws all the widgets, and will run your command-line
program at the push of a button.


CREATE A MULTI-PANEL GUI

If your program has a lot of options, one panel may not be enough to hold them
all without looking cluttered, so you may break them down into multiple Panels,
which will be shown in the GUI as tabs that you can switch between. Create
Panels like this:

    thumbs = Panel("Thumbnails",
        ('thumb-mist-color', Color, ...),
        ('wave', Text, ...)
    )
    text = Panel("Text and Font",
        ('menu-font', Font, ...),
        ('menu-fontsize', Number, ...)
    )

then, create the Application and GUI:

    todisc = Application('todisc', [thumbs, text])
    gui = GUI('MyGUI', [todisc])
    gui.run()

If there are multiple panels, a tabbed interface is created, with one tab
for each panel.


CREATE A MULTI-APPLICATION GUI

If your GUI needs to be able to run several different command-line programs,
you can create a multi-application GUI. Create panels for each application,
then create the applications:

    todisc = Application('todisc', [todisc_panel1, todisc_panel2])
    tovid = Application('tovid', [tovid_panel1, tovid_panel2])

and then the GUI:

    gui = GUI('MultiGUI', [todisc, tovid])
    gui.run()

Run this script standalone for a demonstration of this feature.
"""

# Get all the Metawidgets we'll need
from libtovid.gui.meta import *

### --------------------------------------------------------------------
### todisc panels
### --------------------------------------------------------------------

# (option, Metawidget, label, default, ...) or
# (option, Metawidget, 'required', label, default, ...)
general = Panel("General",
    ('showcase', Filename, 'required',
        'Showcase', '',
        'Image or video file to be showcased in a large central frame',
        'load', 'Select an image or video file.'),
    ('background', Filename, 'required',
        'Background', '',
        'Image or video displayed in the background of the main menu',
        'load', 'Select an image or video file'),
    ('bgaudio', Filename, 'required',
        'Audio', '',
        'Audio file played while the main menu is showing',
        'load', 'Select an audio file'),
    ('submenus', Flag,
        'Create submenus', False),
    ('static', Flag,
        'Static menus (takes less time)', False),
    ('menu-title', Text,
        'Menu title', '',
        'Title of the main menu'),
    ('menu-length', Number,
        'Menu length', 30,
        'Duration of menu in seconds',
        0, 120, 'scale'),
    ('keep-files', Flag,
        'Keep useful intermediate files on exit', False),
    ('no-ask', Flag,
        'No prompts for questions', False),
    ('no-warn', Flag,
        'Do not pause at warnings', False),
    ('use-makemenu', Flag,
        'Use makemenu', False,
        'Create menus using the makemenu script instead of todisc'),
    ('tovidopts', Text,
        'Custom tovid options', '',
        "Space-separated list of options to pass to tovid for encoding.")
)

menu = Panel("Menu",
    ('ani-submenus', Flag,
        'Animated submenus (takes more time)', False,
        'tooltip'),
    ('menu-fade', Flag,
        'Fade in menu', False,
        'tooltip'),
    ('seek', List,
        'Seek time', '',
        'Play thumbnail videos from the given seek time (seconds)'),
    ('bgvideo-seek', Number,
        'Background video seek time', 2,
        'Play background video from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('bgaudio-seek', Number,
        'Background audio seek time', 2,
        'Play background audio from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('showcase-seek', Number,
        'Showcase video seek time', 2,
        'Play showcase video from the given seek time (seconds)',
        0, 3600, 'scale'),
    ('align', Choice,
        'Montage alignment', 'north',
        'Controls positioning of the thumbnails and their titles',
        'north|south|east|west'),
    ('intro', Filename,
        'Intro video', '',
        'Video to play before showing the main menu',
        'load', 'Select a video file'),
    ('showcase-titles-align', Choice,
        'Video(s) title alignment', 'west',
        'tooltip',
        'west|east|center'),
    ('showcase-framestyle', Choice,
        'Showcase frame style', 'none',
        'tooltip',
        'none|glass'),
    ('showcase-geo', Text,
        'Showcase image position (XxY', '',
        'tooltip')
)

# Throw in a few 'required' options just for fun
thumbnails = Panel("Thumbnails",
    ('3dthumbs', Flag,
        'Create 3D thumbs', False,
        'tooltip'),
    ('thumb-shape', Choice, 'required',
        'Thumb shape', 'normal',
        'tooltip',
        'normal|oval|plectrum|egg'),
    ('opacity', Number, 'required',
        'Thumbnail opacity', 100,
        'tooltip',
        1, 100, 'spin'),
    ('blur', Number, 'required',
        'Blur', 4,
        'tooltip',
        1, 5, 'spin'),
    ('rotate-thumbs', List, 'required',
        'Rotate Thumbs (list)', '',
        'tooltip'),
    ('wave', Text, 'required',
        'Wave effect for showcase thumb', 'default',
        'tooltip'),
    ('rotate', Number, 'required',
        'Rotate Showcase thumb', 5,
        'tooltip',
        -30, 30, 'spin'),
    ('thumb-mist-color', Color, 'required',
        'Thumb mist color', 'white',
        'tooltip'),
    ('tile3x1', Flag,
        'Arrange thumb montage in 1 row of 3 thumbs', False,
        'tooltip')
)


audio = Panel("Audio",
    ('menu-audio-length', Number,
        'Menu audio length', 30,
        'tooltip',
        0, 120, 'scale'),
    ('menu-audio-fade', Number,
        'Menu audio fade', 1,
        'tooltip',
        0, 10, 'scale'),
    ('submenu-audio', Filename,
        'Submenu audio file', '',
        'tooltip',
        'load', 'Select an audio file, or video file with audio'),
    ('submenu-audio-length', Number,
        'Submenu audio length', 30,
        'tooltip',
        0, 120, 'scale'),
    ('submenu-audio-fade', Number,
        'Submenu audio fade', 1,
        'tooltip',
        0, 10, 'scale')
)


text = Panel("Text and Font",
    ('menu-font', Font,
        'Menu title font', 'Helvetica',
        'tooltip'),
    ('thumb-font', Font,
        'Video title(s) font', 'Helvetica',
        'tooltip'),
    ('menu-fontsize', Number,
        'Menu title font size', 20,
        'tooltip',
        0, 80, 'scale'),
    ('thumb-fontsize', Number,
        'Video title(s) font size', 12,
        'tooltip',
        0, 80, 'scale'),
    ('title-color', Color,
        'Title color', '',
        'tooltip'),
    ('submenu-title-color', Color,
        'Submenu title color', '',
        'tooltip'),
    ('thumb-text-color', Color,
        'Video title(s) color', '',
        'tooltip'),
    ('text-mist', Flag,
        'Text mist', False,
        'tooltip'),
    ('text-mist-color', Color,
        'Text mist color', '',
        'tooltip'),
    ('text-mist-opacity', Number,
        'Text mist opacity', 60,
        'tooltip',
        1, 100, 'spin'),
    ('menu-title-geo', Choice,
        'Menu title position', 'south',
        'tooltip',
        'north|south|west|east|center'),
    ('menu-title-offset', Text,
        'Offset for menu title position', '+0+0',
        'tooltip'),
    ('stroke-color', Color,
        'Stroke color', '',
        'tooltip'),
    ('submenu-stroke-color', Color,
        'Submenu stroke color', '',
        'tooltip'),
    ('title-gap', Number,
        'Space between Textmenu titles (pixels)', 2,
        'tooltip',
        0, 400, 'spin'),
    ('text-start', Number,
        'Start Textmenu titles at: (pixels)', 2,
        'tooltip',
        0, 460, 'spin')
)

authoring = Panel("Authoring",
    ('chapters', List,
        'Number of Chapters', '',
        'Single value or list'),
    ('chain-videos', List,
        'Chain videos together', '',
        'See "man todisc" for details'),
    ('widescreen', Choice,
        'Widescreen', None,
        'tooltip',
        'nopanscan|noletterbox'),
    ('aspect', Choice,
        'Aspect ratio', '4:3',
        'tooltip',
        '4:3|16:9'),
    ('highlight-color', Color,
        'Highlight color', '',
        'tooltip'),
    ('select-color', Color,
        'Selection color', '',
        'tooltip'),
    ('button-style', Choice,
        'Button style', 'rect',
        'tooltip',
        'rect|text|text-rect'),
    ('audio-lang', List,
        'Default audio language', '',
        'Single value or list'),
    ('subtitles', List,
        'Default subtitle language', '',
        'Single value or list'),
    ('outlinewidth', Number,
        'Outlinewidth for spumux buttons', 4,
        'tooltip',
        0, 20, 'scale'),
    ('loop', Number,
        'Loop', 10,
        'tooltip',
        0, 30, 'scale'),
    ('playall', Flag,
        '"Play all" button', False,
        'tooltip')
)
# Create the todisc application
todisc = Application('todisc',
    [general, menu, thumbnails, audio, text, authoring])


### --------------------------------------------------------------------
### tovid
### --------------------------------------------------------------------

# Create the tovid panels
tovid_panel = Panel("Main",
    ('in', Filename, 'required',
     'Input filename', '',
     'Video file to encode',
     'load', 'Select a video file'),
    ('out', Filename, 'required',
     'Output prefix', '',
     'Name to use for encoded output file (.mpg added automatically)',
     'save', 'Choose an output prefix'),
    ('format', Choice,
     'Format', 'dvd',
     'Disc format',
     'vcd|svcd|dvd'),
    ('tvsys', Choice,
     'TV system', 'ntsc',
     'TV standard system',
     'ntsc|ntscfilm|pal'),
    ('aspect', Choice,
     'Aspect ratio', '4:3',
     'Intended display aspect ratio of input video',
     '4:3|16:9|2.35:1'),
    ('ffmpeg', Flag,
     'Encode using ffmpeg', False),
    ('quality', Number,
     'Video quality', 6,
     'Quality of encoding, on a scale of 1-10.',
     1, 10, 'scale'),
    ('interlaced', Flag,
     'Interlaced encoding', False),
    ('safe', Number,
     'Safe area', 90,
     'Safe area as a percentage of screen size',
     50, 100, 'scale')
)
# Create the tovid application
tovid = Application('tovid', [tovid_panel])

### --------------------------------------------------------------------
### makemenu
### --------------------------------------------------------------------

# Create the makemenu panels
makemenu_panel = Panel("Main",
    ('background', Filename,
     'Background image', '',
     'TOOLTIP'),
    ('crop', Flag,
     'Crop background image', True,
     'Cut off the edges of the background image to make it fit into 4:3'),
    ('scale', Flag,
     'Stretch background image', False,
     'Scale or stretch the background image to fit the 4:3 frame'),
    ('audio', Filename,
     'Background audio', '',
     'Audio file to play while the menu is being shown'),
    ('length', Number,
     'Menu length', 4,
     'Duration of menu playback in seconds.',
     4, 600),
    ('menu-title', Text,
     'Menu title', '',
     'Title or heading for the menu'),
    ('font', Font,
     'Menu font', 'Helvetica',
     'TOOLTIP'),
    ('fontsize', Number,
     'Font size', 24,
     'TOOLTIP',
     8, 64, 'spin'),
    ('menu-title-fontsize', Number,
     'Title font size', 32,
     'Font size for the menu title',
     8, 64, 'spin'),
    ('align', Choice,
     'Text alignment', 'left',
     'TOOLTIP',
     'left|center|middle|right')
)
# Create the makemenu application
makemenu = Application('makemenu', [makemenu_panel])

### --------------------------------------------------------------------
### main GUI
### --------------------------------------------------------------------

# Create the GUI for both applications
gui = GUI("tovid metagui", [todisc, tovid, makemenu])

# Show the GUI window
gui.run()

