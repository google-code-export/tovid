#!/bin/bash

###############################################################################
#                                                                             #
# BVC: a kdialog script for converting and combining seperate clips into one  #
# svcd or dvd format video stream,  with title, lead-in and fades,            #
#  and burning them to disk.                                                  #
#                                                                             #
# It uses ffmpeg, png2yuv (mjpegtools), mplayer/mencoder, growisofs, cdrdao,  #
# imagemagick, sox, vcdimager, and dvdauthor (k3b is optional).               #
# kmplayer is suggested for nice previews of videos in the file dialog.       #
# (kmplayer.sourceforge.net)                                                  #
#                                                                             #
# (If you are just doing DVD's you don't need vcdimager or cdrdao             #
# and if just doing SVCD's you don't need dvdauthor or growisofs.)            #
#                                                                             #
# It was originally written for short clips from a  camera, but it could      #
# be used for any similar purpose                                             #
#                                                                             #
# by Robert Sohn <grepper@gmail.com> (grepper on irc.freenode.net)            #
#                                                                             # 
###############################################################################


TARGET="DVD"
TIME=""
DEVICE="/dev/hdc"
WIN_TITLE="BVC"
FILES=""
PROGRESS_LABEL=""
BACKGROUND_PIC=""
FRAME_STYLE="fancy"
TOTAL_PNGS=230
JOINED_VIDEO=""
JOIN_AUDIO_FILES=""
CURRENT_CLIP=""
WORK_DIR="$HOME/tmp/BVC"
BVC_LOG=$WORK_DIR/BVC.log
DATA_DIR="/usr/share/BVC/data"
KDIALOG="kdialog"
KDIALOG_OPTS="--icon mplayer --miniicon mplayer"
LINE=$(for i in `seq 1 79`;do echo -n =;done)
OUTPUT="the output"
SORRY_MSG="<html><h4>Oops . . .<p>Something went wrong, $OUTPUT was not created. \
Please check the log at $BVC_LOG"
DVDRW_MEDIA="PLUS_R"
VCD_XML="$WORK_DIR/mydisc.xml"
FADE=1  # number of seconds to fade the audio in and out in each clip
DO_FADE=true # set to false if you don't want audio fade


###############################################################################
#                               FUNCTIONS                                     #
###############################################################################

# thanks to Anthony Thyssen http://www.cit.gu.edu.au/~anthony/graphics/imagick6
function fancy()

{

if [ ! $# == 3 ]; then
    echo "usage: $0 infile <infile dimension (XxY)> <outfile>"
    exit
fi
DIM=`identify -format %wx%h $1`
NEW_DIM=$2
for i in $1; do
    convert -size $DIM $1 \
    -thumbnail "$NEW_DIM>" \
    -matte  -compose Copy \
    -bordercolor Black -border 2 -bordercolor Sienna4 -border 3 \
    -bordercolor Black -border 1 -bordercolor none -border 2 \
    -bordercolor Black -border 2 -bordercolor Sienna4 -border 3 \
    -bordercolor Black -border 1 \
    -compose Over \
    \( $DATA_DIR/fancy_add.png \) -gravity NorthWest -composite \
    \( $DATA_DIR/fancy_add.png -flip       \) -gravity SouthWest -composite \
    \( $DATA_DIR/fancy_add.png       -flop \) -gravity NorthEast -composite \
    \( $DATA_DIR/fancy_add.png -flip -flop \) -gravity SouthEast -composite \
    -compose DstOut \
    \( $DATA_DIR/fancy_sub.png \)             -gravity NorthWest -composite \
    \( $DATA_DIR/fancy_sub.png -flip       \) -gravity SouthWest -composite \
    \( $DATA_DIR/fancy_sub.png       -flop \) -gravity NorthEast -composite \
    \( $DATA_DIR/fancy_sub.png -flip -flop \) -gravity SouthEast -composite \
    $3
done

}


function progress_bar_progress()
# increment the progress bar
{
inc=$((`dcop $dcopRef progress` + $1))
dcop $dcopRef setProgress $inc
}

set_progress_bar_label()
# for just setting label with no increment
{
dcop `dcop |grep kdialog` ProgressDialog setLabel "$PROGRESS_LABEL"
}

function cleanlog()
# process $BVC_LOG.tmp variously - eg. ffmpeg's output is ugly without this
{
FOLD="fold -bs"
NO_CR="tr -d '\r'"
RELINE="{s/$SED_VAR/\n$SED_VAR/g}"
TMP_LOG="$BVC_LOG.tmp"


case "$1" in
    1 )
        $FOLD $TMP_LOG >> $BVC_LOG
        echo >> $BVC_LOG
        ;;
    2 )
        $NO_CR < $TMP_LOG | $FOLD >> $BVC_LOG
        echo >> $BVC_LOG
        ;;
    3 ) 
        $NO_CR < $TMP_LOG | sed $RELINE | $FOLD >> $BVC_LOG
        echo >> $BVC_LOG
        ;;
esac

rm -f $BVC_LOG.tmp
}

function vid_length()
{
mencoder $1 -quiet \
-ovc copy -oac pcm -o /dev/null |grep "Video stream"|awk '{print $10}'
}

function sorry_msg()
{
echo "<html><h4>Oops . . .<p>Something went wrong, there was a problem \
creating the $OUTPUT.<br> \
Please check the log at $BVC_LOG</html>"
}

function cleanup()
{
dcop `dcop |grep kdialog` ProgressDialog >/dev/null 2>&1
if [ $? -eq 0 ]; then
    dcop $dcopRef close;exit
else
    exit
fi
}

###############################################################################
#                       END OF FUNCTIONS                                      #
###############################################################################


###############################################################################
#            allow for either dvd or svcd conversion/burning                  #
###############################################################################

SVCD_VID_SIZE_OPT="480x480"
DVD_VID_SIZE_OPT="720x480"
DVD_AUDIO_EXT=ac3
SVCD_AUDIO_EXT=mp2
DVD_SAMPLERATE="48000"
SVCD_SAMPLERATE="44100"
DVD_AUDIO_OPTS="-ab 224 -ar 48000 -ac 2 -acodec $DVD_AUDIO_EXT"
SVCD_AUDIO_OPTS="-ab 224 -ar 44100 -ac 2 -acodec $SVCD_AUDIO_EXT"
SVCD_FFMPEG_TARGET="ntsc-svcd"
DVD_FFMPEG_TARGET="ntsc-dvd"
SVCD_FFMPEG_OPTS="-b 2080 -maxrate 2080 -bufsize 230 -aspect 4:3"
DVD_FFMPEG_OPTS="-b 8000  -maxrate 9000 -bufsize 1835  -aspect 4:3"
SVCD_INTRO_SIZE="240x240"
DVD_INTRO_SIZE="360x240"
SVCD_MPLEX_FORMAT=4
DVD_MPLEX_FORMAT=8


# these 2 args will allow a desktop file to call either BVC-dvd or BVC-svcd
# see if script called with -s (svcd) or -d (dvd) 
while getopts ":sd" Option
# an : after an option  would show it will have an argument passed with it.
do
    case $Option in
    s )
        TARGET="SVCD"
        VID_SIZE_OPT=$SVCD_VID_SIZE_OPT
        AUDIO_OPTS=$SVCD_AUDIO_OPTS
        SAMPLERATE=$SVCD_SAMPLERATE
        AUDIO_EXT=$SVCD_AUDIO_EXT
        FFMPEG_TARGET=$SVCD_FFMPEG_TARGET
        INTRO_SIZE=$SVCD_INTRO_SIZE
        FFMPEG_OPTS=$SVCD_FFMPEG_OPTS
        MPLEX_FORMAT=$SVCD_MPLEX_FORMAT
        ;;
    d )
        TARGET="DVD"
        VID_SIZE_OPT=$DVD_VID_SIZE_OPT
        AUDIO_OPTS=$DVD_AUDIO_OPTS
        SAMPLERATE=$DVD_SAMPLERATE
        AUDIO_EXT=$DVD_AUDIO_EXT
        FFMPEG_TARGET=$DVD_FFMPEG_TARGET
        INTRO_SIZE=$DVD_INTRO_SIZE
        FFMPEG_OPTS=$DVD_FFMPEG_OPTS
        MPLEX_FORMAT=$DVD_MPLEX_FORMAT
        ;;
    esac
done
shift $(($OPTIND - 1))


# check dvdrw-rw or dvdrw+rw status
# maybe I'll even use this someday
if [ $DVDRW_MEDIA = PLUS_R ];then
    BLANK="-leadin"
elif [ $DVDRW_MEDIA = MINUS_R ]; then
    BLANK="-blank"
fi

###############################################################################
#           BEGIN: kdialog greeting, and see if user wants to continue        #
###############################################################################

GREETING="<html><H2>BEN'S VIDEO CONVERTER</H2><p><H3>A program to convert \
camera movie files into a format that can be used on a $TARGET disk. \
<p>When the file browser comes up next, choose the files that you \
want to combine into one video.<br>Choose them one at a time. in the order \
you want them arranged on the video, and press 'Open' for each one. \
<br><br>You can preview them if you make sure 'Show preview' is selected \
when you click on the icon shaped like a wrench at the top of the file \
browser that comes up.<br> \
<br><font color='#0000C6' weight=900>When you are done selecting your video \
clips, press the 'Cancel' button the next time the file browser comes up \
and the processing will start.</font><p><p> \
To begin press 'Yes' , to exit  press 'No'.</H4> \
<p><H3>Do you want to continue ?</html>"

$KDIALOG $KDIALOG_OPTS $WIN_TITLE --yesno  "$GREETING"
if [ $? != 0 ]; then
    exit 0
fi


###############################################################################
#        set up WORK_DIR and create videocd.xml or dvdauthor.xml as needed    #
###############################################################################


# create a user's tmp dir if it doesn't exist
# if it exists, move it to a new name
if [ -d $WORK_DIR ]; then
    mv $WORK_DIR $WORK_DIR-`date "+%s"`
    mkdir -p $WORK_DIR
    else
    mkdir -p  $WORK_DIR
fi

# test if BVC is installed or running from current dir

if [ -d $DATA_DIR ]; then
    DATA_DIR=$DATA_DIR
else
    DATA_DIR=`pwd`/data
fi

if [ $TARGET = "DVD" ]; then
    DVD_AUTHOR_XML="$WORK_DIR/dvdauthor.xml"
    (
    cat <<EOF 
    <dvdauthor dest="$WORK_DIR/FINAL">
    <vmgm>
    </vmgm>
    <titleset>
      <titles>
        <pgc>
          <vob file="$WORK_DIR/final.mpg" chapters="0" />
        </pgc>
      </titles>
    </titleset>
    </dvdauthor>
EOF
    ) | sed 's/^    //' > "$DVD_AUTHOR_XML"

fi

##############################################################################
#   get the file names, start progress bar, and create WORK_DIR directories  # 
##############################################################################

# do processing in $WORK_DIR
cd $WORK_DIR

while [ $? = 0 ]; do
    $KDIALOG $KDIALOG_OPTS --separate-output --getopenfilename $HOME  \
    "*.avi *.AVI *.mov *.MOV *.mpg *.MPG *.mpeg *.MPEG *.m2v *.M2V|videos" \
    >> $WORK_DIR/files.txt 2>/dev/null
        if [ $? = 0 ]; then
          $KDIALOG $KDIALOG_OPTS --inputbox \
          "What name would you like to use for your clip?" \
          "The Big Serve" >>$WORK_DIR/titles.txt
        else
            break
        fi
done

FILES=$(cat $WORK_DIR/files.txt | wc -l)

# make sure the user didn't press cancel before doing anything
if [ ! -s $WORK_DIR/files.txt ]; then
    exit 0
fi

# set up our log file
PATTERN="$(for i in `seq 1 79`;do echo -n \*;done)"
printf "%s\n%s\n%s\n\n\n" "$PATTERN" \
"Ben's video Converter (BVC) - log for `date`" \
"$PATTERN" >> $BVC_LOG


dcopRef=$(kstart --ontop --window "Ben's Video Converter"  \
kdialog -geometry 400x100+0+0   --icon mplayer --miniicon mplayer \
--caption "Ben's Video Converter" --progressbar "$PROGRESS_LABEL")

# trap exits and errors so we can close kdialog
trap cleanup 0 2 15

# create_dirs
for i in `seq 1 $FILES`; do
    mkdir -p  $WORK_DIR/pics/$i/video_fadeout
    #mkdir -p  $WORK_DIR/pics/$i/video_fadein
done


###############################################################################
#                       work on the title images                              #
###############################################################################


progress_bar_progress 1
PROGRESS_LABEL="Creating image files from the videos" 
set_progress_bar_label

# create the pngs for background image and move to proper pics/ dir
for i in `seq 1 $FILES`; do
    VID=`sed -n -e $(echo $i)p $WORK_DIR/files.txt`
    CREATE_PNG_CMD="ffmpeg -i  "$VID" \
    -vframes 8 -s $INTRO_SIZE  $WORK_DIR/pics/$i/%08d.png" 
    printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
    echo -e "\nRunning: $CREATE_PNG_CMD\n" | fold -bs | tr -s ' ' >> $BVC_LOG

    SED_VAR="frame="
    if   $CREATE_PNG_CMD >> $BVC_LOG.tmp 2>&1;then
        cleanlog 3
    else
        cleanlog 3
        OUTPUT="There was a problem creating pngs from the video. \
        Please see the output of $BVC_LOG"
        SORRY_MSG=$OUTPUT
        $KDIALOG --msgbox "$OUTPUT"
        dcop $dcopRef close
        exit 1
    fi

    convert -resize $INTRO_SIZE! $WORK_DIR/pics/$i/00000005.png \
    $WORK_DIR/pics/$i/intro.png 

: <<UNUSED
# while we are at it, create the video fadein png - *not implemented*
convert -size 240x240 -resize $VID_SIZE_OPT! 00000004.png \
$WORK_DIR/pics/$i/$i-video_fadein.png
UNUSED

#clean up
rm -f $WORK_DIR/pics/$i/000*.png 

done

progress_bar_progress 3 
PROGRESS_LABEL="Making background and titles"
set_progress_bar_label
        
# create a title png with picture, frame and title

#  create black background
BACKGROUND_PIC="$WORK_DIR/pics/template.png"
convert  -size $VID_SIZE_OPT xc:"#1E1E1E" $BACKGROUND_PIC

# allow for someday expanding to other frame options
if [ $FRAME_STYLE = "fancy" ]; then
    for VAR in `seq 1 $FILES`; do

        #  create a transparant png with the title on it
        TITLE=`sed   -n -e $(echo $VAR)p $WORK_DIR/titles.txt`
        convert -font $DATA_DIR/Candice.ttf -pointsize 30 -size 420x \
        -gravity Center caption:"$TITLE"  -negate  \( +clone -blur 0x8 \
        -shade 110x45 -normalize \
        $DATA_DIR/aqua_gradient.png  -fx 'v.p{g*v.w,0}' \)  +matte +swap \
        -compose CopyOpacity -composite  $WORK_DIR/pics/$VAR/title.png

        #  create a frame around our title picture
        fancy $WORK_DIR/pics/$VAR/intro.png $INTRO_SIZE $WORK_DIR/pics/$VAR/fancy.png
    


        #  paint the title and the title picture onto the black background
        convert   $WORK_DIR/pics/template.png $WORK_DIR/pics/$VAR/title.png \
        -gravity south -geometry +0+65 -composite  $WORK_DIR/pics/$VAR/fancy.png \
        -gravity north -composite  $WORK_DIR/pics/$VAR/background.png

        #  resize to proper size in case these operations alter the dimensions
        convert -resize $VID_SIZE_OPT! \
        $WORK_DIR/pics/$VAR/background.png $WORK_DIR/pics/$VAR/background.png

    done
fi

# end of title png loop

###############################################################################
#                           end of title image stuff                          #
###############################################################################


###############################################################################
#                       process original video and audio                      #
###############################################################################
# update progress bar
progress_bar_progress 1
PROGRESS_LABEL="converting source video to high bitrate mpeg-4"
set_progress_bar_label

# create high bitrate xvid avi's of our video clips
for i in `seq 1 $FILES`; do 
    CURRENT_CLIP="`sed   -n -e $(echo $i)p $WORK_DIR/files.txt`"
    FFMPEG_ENC_CMD="ffmpeg -i $CURRENT_CLIP -f avi -an -vcodec mpeg4 -b 3000 \
    -r 29.970 -s $VID_SIZE_OPT -aspect 4:3 $WORK_DIR/pics/$i/$i.avi"
    printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
    echo -e "\nRunning: $FFMPEG_ENC_CMD\n" | fold -bs | tr -s ' ' >> $BVC_LOG

    SED_VAR="frame="
    if $FFMPEG_ENC_CMD >> $BVC_LOG.tmp 2>&1; then
        cleanlog 3
    else
        cleanlog 3
        OUTPUT="clips from your videos"
        SORRY_MSG=$(sorry_msg)
        $KDIALOG $KDIALOG_OPTS --sorry "$SORRY_MSG"
        dcop $dcopRef close
        exit 1
    fi

done

# update progress bar
progress_bar_progress 10
PROGRESS_LABEL="Extracting audio and processing"
set_progress_bar_label

        
# extract audio from files, or if none, create silence
for i in `seq 1 $FILES`; do 
    CURRENT_CLIP=`sed   -n -e $(echo $i)p $WORK_DIR/files.txt`
    if ! mplayer -identify -frames 0 -vo null -ao null $CURRENT_CLIP|
    grep "no sound"; then
        ffmpeg -i $CURRENT_CLIP -ar 44100 -ac 2 -acodec pcm_s16le -y \
        $WORK_DIR/pics/$i/$i.wav
    else
        TIME=`mencoder -quiet -ovc copy -oac pcm -o /dev/null  $CURRENT_CLIP \
        |grep "Video stream"|awk '{print$10}'`
        cat /dev/zero | nice -n 0 sox -t raw -c 2 -r 48000 -w \
        -s - $WORK_DIR/pics/$i/$i.wav  trim 0 $TIME
    fi
done
        
# update progress bar
progress_bar_progress 3

#create fade effect on the extracted wavs
if [ $DO_FADE = true ]; then

    for i in `seq 1 $FILES`; do
        mencoder -quiet -ovc copy -oac copy -o /dev/null  \
        $WORK_DIR/pics/$i/$i.avi |grep "Video stream"|awk '{print$10}' \
        >$WORK_DIR/pics/$i/$i.wav.stat

        WAV_TIME=`cat $WORK_DIR/pics/$i/$i.wav.stat`
        FADE=1
        sox $WORK_DIR/pics/$i/$i.wav \
        $WORK_DIR/pics/$i/$i-processed.wav fade t $FADE $WAV_TIME $FADE
    done

elif [ $DO_FADE = false ]; then
    mv $WORK_DIR/pics/$i/$i.wav $WORK_DIR/pics/$i/$i-processed.wav
fi


# convert faded wav to mp2
for i in `seq 1 $FILES`; do ffmpeg -i $WORK_DIR/pics/$i/$i-processed.wav \
$AUDIO_OPTS -y $WORK_DIR/pics/$i/$i.$AUDIO_EXT ; done

# update progress bar
progress_bar_progress 3
PROGRESS_LABEL="Creating a Title lead-in for each clip"
set_progress_bar_label

###############################################################################
#             end of processing original video and audio                      #
###############################################################################


###############################################################################
#                       work on the title lead-ins                            #
###############################################################################


# create black png for dissolve
convert  -size $VID_SIZE_OPT xc:black $WORK_DIR/black.png

# copy enough background.png's to destination for a lead-{in,out}
for i in `seq 1 $FILES`; do
    for a in `seq 0 $TOTAL_PNGS`; do
        cp $WORK_DIR/pics/$i/background.png $WORK_DIR/pics/$i/$a.png
    done
done


# finish the leadin operations, like identifying the target 
# pngs, dissolving, and making a video stream of them 

for i in `seq 1 $FILES`; do

    # try to make the progress bar a little less irrelevent
    # percentage of total time taken for these operation (for progress bar)
    LEADIN_PCENT_TOTAL=30

    LEADIN_OPERATIONS=$(($FILES * 4))
    PROG_INC=$(echo "scale=0; $LEADIN_PCENT_TOTAL / $LEADIN_OPERATIONS"|bc -l)
    if [ $PROG_INC -lt 1 ]; then
    PROG_INC=1
    fi


    # kludgy way of identifing our target pngs 
    TITLE_FADEIN_PNGS=$(for PIC in `seq 0 50`; do
        find $WORK_DIR/pics/$i/ -name $PIC.png -exec basename {} \;;done)

    TITLE_FADEOUT_PNGS=$(for PIC in `seq 180 $TOTAL_PNGS`;do
        find $WORK_DIR/pics/$i/ -name $PIC.png -exec basename {} \;;done)


    # use -dissolve to create fade effect 
    Y=0;S=100;for X in $TITLE_FADEIN_PNGS ; do
        PROGRESS_LABEL="processing title fade-in: $X of clip $i"
        set_progress_bar_label
        composite -dissolve \
        $S $WORK_DIR/black.png  $WORK_DIR/pics/$i/$X  $WORK_DIR/pics/$i/$X
        Y=$((Y+1));S=$((S-2))
    done

    # update progress bar
    progress_bar_progress  $PROG_INC
    PROGRESS_LABEL="Finished title fade-ins for clip $i"
    set_progress_bar_label
    sleep 1

    Y=0;S=0;for X in $TITLE_FADEOUT_PNGS ; do
        PROGRESS_LABEL="processing title fade-out: $X of clip $i" 
        set_progress_bar_label
        composite -dissolve \
        $S $WORK_DIR/black.png  $WORK_DIR/pics/$i/$X  $WORK_DIR/pics/$i/$X
        Y=$((Y+1));S=$((S+2))
    done

    # update progress bar
    progress_bar_progress  $PROG_INC
    PROGRESS_LABEL="Finished title fade-outs for clip $i"
    set_progress_bar_label
    sleep 1

    # resize for now
    for PIC in `find $WORK_DIR/pics/$i/ -name 000\*.png`; do
        convert -resize $VID_SIZE_OPT! $PIC $PIC
    done

    # use png2yuv to convert to an mpeg stream
    PROGRESS_LABEL="converting title pngs of clip $i to video"
    set_progress_bar_label
    png2yuv  -f 29.970 -I p -b 1 -n $TOTAL_PNGS -j  $WORK_DIR/pics/$i/%0d.png |
    ffmpeg -f yuv4mpegpipe -i -  -an -vcodec mpeg4 -r 29.970 -b 3000 \
    -s $VID_SIZE_OPT -aspect 4:3 -y "$WORK_DIR/pics/$i/$i-leadin.avi" 

    progress_bar_progress  $PROG_INC

    # remove pngs to save disk space
    rm -f $WORK_DIR/pics/$i/*.png

done

PROGRESS_LABEL="Creating silence for Titles" 
set_progress_bar_label

# create silence for leadin/leadout
for i in `seq 1 $FILES`; do 
    TIME=`mencoder -quiet -ovc copy -oac copy -o /dev/null  \
    $WORK_DIR/pics/$i/$i-leadin.avi |grep "Video stream"|awk '{print$10}'`
    ffmpeg -t $TIME $AUDIO_OPTS \
    $WORK_DIR/pics/$i/$i-leadin.$AUDIO_EXT
    progress_bar_progress  $PROG_INC
done

###############################################################################
#                       end of title lead-in stuff                            #
###############################################################################


###############################################################################
#                       begin work on video fades                             #
###############################################################################

# create the pngs for the video fadeout from our new mpeg-4's 
#and move to proper fadeout dir
for i in `seq 1 $FILES`; do


    VID_LENGTH=`vid_length $WORK_DIR/pics/$i/$i.avi`
    ROUND_VID_LENGTH=`echo $VID_LENGTH|cut -f1 -d.`
    CUT_TIME=$[$ROUND_VID_LENGTH - 2]
    ffmpeg  -ss $CUT_TIME -i $WORK_DIR/pics/$i/$i.avi %8d.png
    VIDEO_FADEOUT_PNG=`ls 000*.png|sort -rn|sed  -n -e 2p`

    # just in case png creation failed, then use plain background
        if [ -z $VIDEO_FADEOUT_PNG ];then
            VIDEO_FADEOUT_PNG="$WORK_DIR/pics/template.png"
        fi

    convert -resize $VID_SIZE_OPT! $VIDEO_FADEOUT_PNG \
    $WORK_DIR/pics/$i/$i-video_fadeout.png
    rm -f 000*.png

done

# copy enough video_fadeout.png's to create a fade
for i in `seq 1 $FILES`; do
    for a in `seq 0 130`; do 
        cp $WORK_DIR/pics/$i/$i-video_fadeout.png \
        $WORK_DIR/pics/$i/video_fadeout/$a.png
    done
done

# do the leadin operations on the video clip


for i in `seq 1 $FILES`; do

    # try to make the progress bar a little less irrelevent
    # percentage of total time taken for these operation (for progress bar)

    FADEOUT_PCENT_TOTAL=20
    FADEOUT_OPERATIONS=$(($FILES * 3))
    PROG_INC=$(echo "scale=0; $FADEOUT_PCENT_TOTAL / $FADEOUT_OPERATIONS"|bc -l)
    if [ $PROG_INC -lt 1 ]; then
    PROG_INC=1
    fi

    CLIP_FADEOUT_PNGS=$(for PIC in `seq 80 130`; do 
        find $WORK_DIR/pics/$i/video_fadeout \
        -name $PIC.png -exec basename {} \;;done)

    # do the fadeout on each video
    Y=0;S=0;for X in $CLIP_FADEOUT_PNGS ; do
    PROGRESS_LABEL="processing clip fade-out: $X of clip $i"
    set_progress_bar_label

    composite -dissolve $S $WORK_DIR/black.png  \
    $WORK_DIR/pics/$i/video_fadeout/$X  $WORK_DIR/pics/$i/video_fadeout/$X
    Y=$((Y+1));S=$((S+2))
    done

    # update progress bar
    progress_bar_progress  $PROG_INC
    PROGRESS_LABEL="converting clip fadeout pngs of clip $i to video"
    set_progress_bar_label

    # convert to video stream

    PNG2YUV_CMD="png2yuv  -f 29.970 -I p -b 1 -n 130 -j \
    $WORK_DIR/pics/$i/video_fadeout/%0d.png"
    FFMPEG_CMD="ffmpeg -f yuv4mpegpipe -i - -an -vcodec mpeg4 -r 29.970 -s \
    $VID_SIZE_OPT -aspect 4:3 -b 3000 -y $WORK_DIR/pics/$i/$i-video_fadeout.avi"

    printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
    echo -e "\nRunning: $PNG2YUV_CMD | $FFMPEG_CMD\n" | fold -bs | tr -s ' ' >> $BVC_LOG

    SED_VAR="frame="
    if { $PNG2YUV_CMD | $FFMPEG_CMD ;}  >> $BVC_LOG.tmp 2>&1; then
        cleanlog 3
    else
        cleanlog 3
        OUTPUT="There was a problem converting the pngs to video. \
        Please see the output of $BVC_LOG"
        $KDIALOG --msgbox "$OUTPUT"
        dcop $dcopRef close
        exit 1
    fi
    
    # update progress bar
    progress_bar_progress  $PROG_INC
    PROGRESS_LABEL="creating silence for video fadeout of clip $i"
    set_progress_bar_label

    # create silence for video fadeout
    TIME=`mencoder -quiet -ovc copy -oac copy \
    -o /dev/null  $WORK_DIR/pics/$i/$i-video_fadeout.avi \
    |grep "Video stream"|awk '{print$10}'`

    ffmpeg -t $TIME $AUDIO_OPTS \
    $WORK_DIR/pics/$i/$i-video_fadeout.$AUDIO_EXT

    # remove pngs to save space
    rm -f $WORK_DIR/pics/$i/video_fadeout/*.png
    
    # update progress bar
    progress_bar_progress  $PROG_INC
done


###############################################################################
#                      end of video fade stuff                                #
###############################################################################


###############################################################################
#       join the files into one video and audio file, then mplex them         #
###############################################################################

PROGRESS_LABEL="Joining all video and audio, and combining into one file"
set_progress_bar_label

# put everything together into m2v and mp2,then mplex them together
JOIN_AUDIO_FILES="$(for i in `seq 1 $FILES`; do
    echo -en "$WORK_DIR/pics/$i/$i-leadin.$AUDIO_EXT \
    $WORK_DIR/pics/$i/$i.$AUDIO_EXT \
    $WORK_DIR/pics/$i/$i-video_fadeout.$AUDIO_EXT ";done)"


JOINED_VIDEO="$(for i in `seq 1 $FILES`; do
    echo -en "$WORK_DIR/pics/$i/$i-leadin.avi $WORK_DIR/pics/$i/$i.avi \
    $WORK_DIR/pics/$i/$i-video_fadeout.avi ";done)"
OUTPUT="clips from your videos"

# make sure the right number of files got created
if test  `echo $JOINED_VIDEO | wc -w`  -ne $(($FILES * 3)) ; then
    SORRY_MSG=$(sorry_msg)
    $KDIALOG --msgbox "$SORRY_MSG"
    dcop $dcopRef close
    exit 1
fi

OUTPUT="joined video"
COPY_CMD="mencoder -quiet -oac copy -ovc copy $JOINED_VIDEO \
-o $WORK_DIR/joined-tmp.avi"

printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
echo -e "\nRunning: $COPY_CMD\n" |fold -bs | tr -s ' ' >> $BVC_LOG
#if $COPY_CMD 2>&1| fold -bs >> $BVC_LOG; then
if $COPY_CMD >> $BVC_LOG.tmp 2>&1; then
    cleanlog 1
else
    cleanlog 1
    SORRY_MSG=$(sorry_msg)
    $KDIALOG --msgbox "$SORRY_MSG"
    dcop $dcopRef close
    exit 1
fi


progress_bar_progress 3
PROGRESS_LABEL="Converting our new video file to $TARGET mpeg-2 format"
set_progress_bar_label

OUTPUT="final joined svcd video"
JOIN_CMD="ffmpeg -i $WORK_DIR/joined-tmp.avi -r 29.970 -f mpeg2video \
-tvstd ntsc $FFMPEG_OPTS -s $VID_SIZE_OPT -y $WORK_DIR/joined.m2v"

printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
echo -e "\nRunning: $JOIN_CMD\n" | fold -bs  | tr -s ' ' >> $BVC_LOG

SED_VAR="frame="
if $JOIN_CMD >> $BVC_LOG.tmp 2>&1; then
    cleanlog 3
else
    cleanlog 3
    SORRY_MSG=$(sorry_msg)
    $KDIALOG --msgbox "$SORRY_MSG"
    dcop $dcopRef close
    exit 1
fi


# use cat to join the finished individual audio files
cat $JOIN_AUDIO_FILES > $WORK_DIR/joined.$AUDIO_EXT

# update progress bar
progress_bar_progress 15
PROGRESS_LABEL="Joining the finished audio and video together"
set_progress_bar_label

OUTPUT="mplexed final video (audio plus video)"
MPLEX_CMD="mplex -V -f $MPLEX_FORMAT -b 230 -o $WORK_DIR/final.mpg \
$WORK_DIR/joined.m2v $WORK_DIR/joined.$AUDIO_EXT"

printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
echo -e "\nRunning: $MPLEX_CMD\n" |fold -bs | tr -s ' ' >> $BVC_LOG

if $MPLEX_CMD >> $BVC_LOG.tmp 2>&1; then
    cleanlog 1
else
    cleanlog 1
    SORRY_MSG=$(sorry_msg)
    $KDIALOG --msgbox "$SORRY_MSG"
    dcop $dcopRef close
    exit 1
fi


###############################################################################
#                         begin burning stuff                                 #
###############################################################################

# set up some vars to make case statements easier
BVC_LOG="$WORK_DIR/BVC.log"

if [ $TARGET = "DVD" ]; then
    K3B_BURN_CMD="k3b --videodvd $WORK_DIR/FINAL/*"

elif [ $TARGET = "SVCD" ]; then
    K3B_BURN_CMD="k3b --cdimage $VCD_XML.cue"
fi

NOBURN_STRING="<html><H4>You selected to not burn right now<p> \
Your video files are  $HOME/tmp/BVC/FINAL/<p> \
You can burn later with: \
<p><font color='#0000C6' weight=900>\"$K3B_BURN_CMD\"</font><p> \
Thanks for using Ben's Video Converter !</html>"

if [ $TARGET = "DVD" ]; then
    $KDIALOG --yesno \
    "<html>Now we will preceed to burn<p> \
    Please insert a dvd+r or dvd+rw disk into your drive \
    and press 'Yes' when ready<p> \
    If for some reason you wish to cancel the burn press 'No' \
    and you can burn later</html>"

    case "$?" in
    # user goes ahead with the burn
    0 ) 
        PROGRESS_LABEL="Making dvd structure and configuration files"
        set_progress_bar_label

        OUTPUT="$WORK_DIR/FINAL/ directory structure for your DVD"
        DVDAUTHOR_CMD="dvdauthor  -x $DVD_AUTHOR_XML"
        printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
        echo -e "\nRunning: $DVDAUTHOR_CMD\n" |fold -bs | tr -s ' ' >> $BVC_LOG

        if $DVDAUTHOR_CMD >> $BVC_LOG.tmp 2>&1; then
            cleanlog 2
        else
            cleanlog 2
            SORRY_MSG=$(sorry_msg)
            $KDIALOG --sorry "$SORRY_MSG"
            dcop $dcopRef close
            exit 1
        fi


        OUTPUT="DVD"
        # update progress bar
        progress_bar_progress 2
        PROGRESS_LABEL="Burning the dvd structure to DVD"
        set_progress_bar_label


:<<UNUSED
        DVD_BLANK_CMD="dvd+rw-format $BLANK $DEVICE"
        echo -e "Running: $DVD_BLANK_CMD\n" >> $BVC_LOG
        if $DVD_BLANK_CMD >> $BVC_LOG 2>&1; then
            :
        else
            $KDIALOG --msgbox \
            "<html>Oops, something went wrong, please check the media \
            you inserted is good and look at $BVC_LOG</html>"
            dcop $dcopRef close
            exit 1
        fi
UNUSED


        GROWISOFS_CMD="growisofs -use-the-force-luke=tty -dvd-compat \
        -Z /dev/dvd -dvd-video $WORK_DIR/FINAL/"
        printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
        echo -e "\nRunning: $GROWISOFS_CMD\n" |fold -bs|tr -s ' ' >> $BVC_LOG
        SORRY_MSG=$(sorry_msg)

        #if $GROWISOFS_CMD 2>&1 | fold -bs >> $BVC_LOG; then
        if $GROWISOFS_CMD >> $BVC_LOG.tmp 2>&1; then
            cleanlog 1
        else
            cleanlog 1
            $KDIALOG --msgbox "$SORRY_MSG"
            dcop $dcopRef close
            exit 1
        fi
        

        dcop $dcopRef setProgress 100
        ;;

    # user cancel out of the burn
    1 )
        dcop $dcopRef setProgress 100
        PROGRESS_LABEL="DONE !"
        set_progress_bar_label
        sleep 1
        # see if user wants to preview video
        $KDIALOG --yesno \
        "<html><h4>your converted and combined file is ready and can be found at \
        $WORK_DIR/final.mpg .  Do you wish to watch it now?</html>"


        # if yes, then play with mplayer
        if [ $? -eq 0 ]; then
            dcop $dcopRef close
            OUTPUT="$WORK_DIR/final.mpg"
            if test -f $OUTPUT; then
                mplayer $OUTPUT
                $KDIALOG --msgbox "$NOBURN_STRING"
                exit 0
            else
                SORRY_MSG=$(sorry_msg)
                $KDIALOG --sorry "$SORRY_MSG"
                dcop $dcopRef close
                exit 1
            fi
        else
            $KDIALOG --msgbox "$NOBURN_STRING"
            dcop $dcopRef close
            exit 0
        fi
        ;;
    esac



$KDIALOG $KDIALOG_OPTS --msgbox \
"<html><H3>Your burned disk should be ready<p> \
Thanks for using Ben's Video Converter !</html>"
cleanup
exit 0

elif [ $TARGET = "SVCD" ]; then

    # we are making a svcd
    PROGRESS_LABEL="Making svcd configuration, bin, and cue files"
    set_progress_bar_label
    printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
    VCDXGEN_CMD="vcdxgen -t svcd $WORK_DIR/final.mpg -o $VCD_XML"
        if $VCDXGEN_CMD >> $BVC_LOG 2>&1; then
            :
        else
            OUTPUT="svcd configuration file"
            SORRY_MSG=$(sorry_msg)
            $KDIALOG --sorry "$SORRY_MSG"
            dcop $dcopRef close
            exit 1
        fi

    OUTPUT="final SVCD bin and cue files for burning"
    VCDXBUILD_CMD="vcdxbuild -c "$VCD_XML.cue" -b "$VCD_XML.bin" "$VCD_XML""
    echo -e "\nRunning: "$VCDXBUILD_CMD"\n" |fold -bs | tr -s ' ' >> $BVC_LOG

    if $VCDXBUILD_CMD >> $BVC_LOG.tmp 2>&1; then
        cleanlog 1
    else
        cleanlog 1
        SORRY_MSG=$(sorry_msg)
        $KDIALOG --sorry "$SORRY_MSG"
        dcop $dcopRef close
        exit 1
    fi


    progress_bar_progress 10
    sleep 2

    # find out if we have a CDR or CDRW here, and blank if need be
    $KDIALOG --yesnocancel \
    "<html>Now we will preceed to burn<p> \
    Please insert a disk in your drive \
    <p>Is this a CDRW disk, or is it a plain CDR ? \
    <p>If it is a CDRW (rewritable disk) then press 'yes' \
    <p>If it is a CDR (write once disk) then press 'no'</html>"

    case "$?" in
    0 )

        PROGRESS_LABEL="Blanking the CD"
        set_progress_bar_label

#        CDRW_BLANK_CMD="cdrecord dev=$DEVICE blank=fast"
        CDRW_BLANK_CMD="cdrdao blank --device $DEVICE"
        printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
        echo -e "\nRunning: $CDRW_BLANK_CMD\n" |fold -bs | tr -s ' ' >> $BVC_LOG

        if $CDRW_BLANK_CMD >> $BVC_LOG.tmp 2>&1; then
            cleanlog 1
            progress_bar_progress 5
        else
            cleanlog 1
            $KDIALOG $KDIALOG_OPTS --sorry "<html><h4>There was a problem blanking the CD<p>
            Please check $BVC_LOG</html>"
            dcop $dcopRef close
            exit 1
        fi

        PROGRESS_LABEL="Writing the CD"
        set_progress_bar_label

        CDRDAO_CMD="cdrdao write --device $DEVICE --driver generic-mmc \
        "$VCD_XML.cue""
        OUTPUT="SVCD disk"
        printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
        echo -e "\nRunning: $CDRDAO_CMD\n" |fold -bs | tr -s ' ' >> $BVC_LOG

        SED_VAR="Wrote"
        if $CDRDAO_CMD >> $BVC_LOG.tmp 2>&1; then
            cleanlog 3
            rm -f $BVC_LOG.tmp
        else
            cleanlog 3
            SORRY_MSG=$(sorry_msg)
            $KDIALOG --sorry "$SORRY_MSG"
            dcop $dcopRef close
            exit 1
        fi

        PROGRESS_LABEL="DONE !"
        set_progress_bar_label
        dcop $dcopRef setProgress 100
        ;;
    1 ) 
        PROGRESS_LABEL="Writing the CD"
        set_progress_bar_label
        sleep 2

        CDRDAO_CMD="cdrdao write --device $DEVICE --driver generic-mmc \
        "$VCD_XML.cue""

        SED_VAR="Wrote"
        printf "%s\n\n" "$LINE" "$LINE" >> $BVC_LOG
        echo -e "\nRunning: "$CDRDAO_CMD\n"" |fold -bs | tr -s ' ' >> $BVC_LOG
        if $CDRDAO_CMD >> $BVC_LOG.tmp 2>&1; then
            cleanlog 3
        else
            cleanlog 1
            OUTPUT="SVCD disk"
            SORRY_MSG=$(sorry_msg)
            $KDIALOG --sorry "$SORRY_MSG"
            dcop $dcopRef close
            exit 1
        fi

        sleep 2
        PROGRESS_LABEL="DONE !"
        set_progress_bar_label
        dcop $dcopRef setProgress 100
        sleep 2
        dcop $dcopRef close
        ;;
    2 )
        # user cancels
        OUTPUT="$WORK_DIR/final.mpg"
        dcop $dcopRef setProgress 100
        $KDIALOG --yesno \
        "<html><h4>your converted and combined file is ready and can be found at \
        $WORK_DIR/final.mpg .  Do you wish to watch it now?</html>"
        

        # if no, then exit with message
        # if yes, then play with mplayer
        if [ $? -ne 0 ]; then
            $KDIALOG --msgbox "$NOBURN_STRING"
            dcop $dcopRef close
            exit 0
        else
            dcop $dcopRef close
            if test -f $OUTPUT; then
                mplayer $OUTPUT
                $KDIALOG --msgbox "$NOBURN_STRING"
                exit 0
            else 
                SORRY_MSG=$(sorry_msg)
                $KDIALOG --sorry "$SORRY_MSG"
                dcop $dcopRef close
                exit 1
            fi
        fi
        ;;
    esac

fi

$KDIALOG $KDIALOG_OPTS $WIN_TITLE --msgbox \
"<html><H3>Your burned $TARGET disk should be ready<p> \
Thanks for using Ben's Video Converter !</html>"
cleanup
exit 0
