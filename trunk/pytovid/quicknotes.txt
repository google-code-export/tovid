
# =========================================
# Two approaches to parsing command-line options

# =========================================
# APPROACH 1:

# Element definition using a bunch of
# variables corresponding to menu attributes
class MenuElement:
    font = "Helvetica"
    fontsize = "12"
    alignment = "left"
    textcolor = "white"
    highlightcolor = "red"
    selectcolor = "green"

# The parser creates a MenuElement to fill in
element = MenuElement()

# Do a bunch of if-elses for all valid command-line
# options. If a valid one is found, set the corresponding
# MenuElement variable to the value supplied in the
# argument (get_token()).
if opt == "-font":
    element.font = self.lexer.get_token()
elif opt == "-fontsize":
    element.fontsize = self.lexer.get_token()
elif opt == "-align":
    element.align = self.lexer.get_token()
# elif
#   ...
else:
    print "Invalid option: " + opt





# =========================================
# APPROACH 2

# Element definition:

class MenuElement:
    options = {
        '-font': "Helvetica",
        '-fontsize': "12",
        '-alignment': "left",
        '-textcolor': "white",
        '-highlightcolor': "red",
        '-selectcolor': "green" }

# The parser creates a menu element to fill in
element = MenuElement()

# For each command-line option, the parser checks
# to see if it's a valid MenuElement option.
# If so, the corresponding option in element.options
# is filled in with the argument (get_token())
if opt in element.options:
    element.options[ opt ] = self.lexer.get_token()    
else:
    print "Invalid option: " + opt






# =========================================
# Pros/cons
#
# Approach 1 pros:
#   * More explicit handling of each different
#     command-line option. Unary options (those without
#     an argument) are easy to handle; just don't
#     call get_token().
# Approach 1 cons:
#   * Excessive verbosity.
#   * Definition of command-line options is split
#     into two places (MenuElement and Parser).
#
# Approach 2 pros:
#   * Simplicity. No long if-elses.
#   * Flexibility. MenuElement attributes can easily
#     be translated back into command-line options.
#   * Definition in one place (MenuElement defines
#     valid options, and defaults for each option)
# Approach 2 cons:
#   * May require special handling for unary options.
